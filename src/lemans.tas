;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; LeMans for Commodore 64                                                      ;
; Disassembly                                                                  ;
;
; by riq / L.I.A
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;

; Compile-time variables
USE_JOYSTICK .VAR 0             ;Set it to 1 to use Joystick instead of Paddle

;
; **** ZP FIELDS ****
;
f30 = $30
f34 = $34
f4E = $4E
f5D = $5D
f6B = $6B
ZP_ROAD_X_LEFT_ROW_TBL = $79
ZP_ROAD_X_RIGHT_ROW_TBL = $92
ZP_ROAD_STATE_ROW_TBL = $AB
;
; **** ZP ABSOLUTE ADRESSES ****
;
ZP_IRQ_LO = $02
ZP_IRQ_HI = $03
ZP_TMP_PTR_LO = $04
ZP_TMP_PTR_HI = $05
ZP_SCREEN_PTR_LO = $06
ZP_SCREEN_PTR_HI = $07
a08 = $08
a09 = $09
ZP_SCORE_01 = $0A
ZP_SCORE_02 = $0B
ZP_SCORE_03 = $0C
ZP_ZERO_IS_ZERO = $0D           ;If 1, print "0" as "0", otherwise as " "
ZP_HI_SCORE_01 = $0E
ZP_HI_SCORE_02 = $0F
ZP_HI_SCORE_03 = $10
ZP_SOUND_ENABLED = $11
ZP_IS_GAME_OVER = $12
a13 = $13
TIMER0_CNT = $14
TIMER0_TRIGGERED = $15
ZP_TIME = $16
ZP_TICK_COUNTER = $17           ;Current number of ticks.
ZP_TICKS_PER_SECOND = $18       ;How many ticks are in a second
TIMER1_TRIGGERED = $19
ZP_ROAD_STATE = $1A
a1B = $1B
a1C = $1C
a1D = $1D
SHOULDER_LEFT_IDX = $1E
SHOULDER_RIGHT_IDX = $1F
a20 = $20
ZP_DIGIT_TO_PRINT = $21         ;Digit to print. Values from 0 to 9
ZP_BCD_TO_PRINT = $22           ;Encoded in BCD
ZP_TMP_REG_00 = $23
ZP_TMP_REG_01 = $24
ZP_HEADLIGHT_DURATION = $25
a26 = $26
ZP_SPEED_LO = $27
ZP_SPEED_HI = $28
a29 = $29
a2A = $2A
a2B = $2B
a2C = $2C
a2D = $2D
a2E = $2E
a2F = $2F
ZP_UNUSED_30 = $30
ZP_UNUSED_31 = $31
ZP_UNUSED_32 = $32
ZP_UNUSED_33 = $33
a34 = $34
a35 = $35
a36 = $36
a37 = $37
ZP_PADDLE_1_VALUE_INV = $38
ZP_PADDLE_1_VALUE = $39
a3A = $3A
a3B = $3B
a3C = $3C
a3D = $3D
a3E = $3E
ZP_PIXELS_TO_MOVE_CAR = $41
ZP_BRAKE_FORCE = $42
ZP_FRAME_PTR_IDX = $43
a44 = $44
ZP_FLAME_ANIM_DELAY = $45
ZP_FLAME_FRAME_IDX = $46
a47 = $47
a48 = $48
ZP_TMP_49 = $49
ZP_TMP_4A = $4A
a4B = $4B
a4C = $4C
a4D = $4D
a4E = $4E
a4F = $4F
a50 = $50
a51 = $51
ZP_LEFT_SHOULDER_ENABLED = $52
a53 = $53
a54 = $54
a55 = $55
a56 = $56
a57 = $57
ZP_COLLISION_DETECTED = $58
a59 = $59
a5A = $5A
a5B = $5B
a5C = $5C
a61 = $61
a62 = $62
a63 = $63
ZP_SOUND_EFFECT_TO_PLAY = $64
ZP_SPLIT_ROAD_SPRITE_DISPLAYED = $65
a66 = $66
a67 = $67
a68 = $68
a69 = $69
a6A = $6A
a6C = $6C
a6D = $6D
a6E = $6E
ZP_PASSED_CARS_TOTAL = $6F
ZP_ADD_1000_PTS = $70
a71 = $71
a72 = $72
a73 = $73
a74 = $74
a75 = $75
a76 = $76
a77 = $77
a78 = $78
;
; **** FIELDS ****
;
SCREEN_RAM = $0400
COLOR_RAM = $D800
;
; **** ABSOLUTE ADRESSES ****
;
SPR_FRAME_PTR_00 = $07F8
SPR_FRAME_PTR_04 = $07FC
SPR_FRAME_PTR_05 = $07FD
SPR_FRAME_PTR_06 = $07FE
SPR_FRAME_PTR_07 = $07FF
;
; **** POINTERS ****
;
p0002 = $0002
SCORE_OFFSET = SCREEN_RAM + 40 * 2 + 32
TIME_OFFSET = SCREEN_RAM + 40 * 5 + 35
HI_SCORE_OFFSET = SCREEN_RAM + 40 * 8 + 32


;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Notes
; Sprite frames:
; $e6 = ???
; $e7 = ???
; $f3 = PIT
; $f4 = Hero Car 00
; $f5 = Hero Car 01, simil 00 but with tires moving
; $f6 = Enemy Car 00
; $f7 = Enemy Car 01, simil 02 but with tires moving
; $f8 = Flames 1 (overlay sprite)
; $f9 = Flames 2 (overlay sprite)
; $fa = Car mask (?)
; $fb = Split road ahead
; $fc = Headlights top-left
; $fd = Headlights top-right
; $fe = Headlights center
;
; Sprites:
; 0-3: Enemy cars
; 4: PIT / Top-Left Headlight
; 5: Top-Right Headlight / Flame 01
; 6: Split road ahead / Central Headlight / Flame 02
; 7: Hero car
;
; Road states (ZP_ROAD_STATE)
; $00 = Green
; $01 = White, Ice
; $02 = Black, Night
; $03 = Green
; $04 = Green, Show  Split Screen sprite
; $05 = Brown, turns
; $06 = Split screen
; $07 = Purple, shoulder on left (initial state)
; $08 = Purple, shoulder on left


;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; It is an 8Kb Ultimax cartridge.
; Starting address:
        * = $E000

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
IRQ_HANDLER
        PHA
        TXA
        PHA
        TYA
        PHA
        JMP (p0002)

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Interrupt is triggered by Timer A
IRQ_HANDLER_MAIN
        LDA ZP_SOUND_ENABLED
        BEQ _L00

        JSR PLAY_AUDIO

_L00    INC TIMER0_CNT
        INC TIMER0_CNT
        LDA TIMER0_CNT
        CMP #60
        BCC _L01

        LDY #$00
        STY TIMER0_CNT
        INY
        STY TIMER0_TRIGGERED

_L01    LDA #$01
        STA TIMER1_TRIGGERED

        LDA $DC0D               ;CIA1: CIA Interrupt Control Register

        PLA
        TAY
        PLA
        TAX
        PLA
        RTI

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
VIC_VALUES
        .BYTE $10       ;$D011 - Text, 24-rows
        .BYTE $00       ;$D012 - Raster
        .BYTE $00       ;$D013 - Latch X
        .BYTE $00       ;$D014 - Latch Y
        .BYTE $00       ;$D015 - All sprites disabled
        .BYTE $18       ;$D016 - 40 Cols, Multicolor mode
        .BYTE $00       ;$D017 - Y-expanded sprites: None
        .BYTE $1E       ;$D018 - Charset : 0x3800 / Screen RAM: 0x0400
        .BYTE $00       ;$D019 - VIC Interrupts (ACK)
        .BYTE $00       ;$D01A - Request VIC Interrupts: None

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Starting address
START
        SEI
        LDA #$00
        STA ZP_HI_SCORE_01
        STA ZP_HI_SCORE_02
        STA ZP_HI_SCORE_03

        LDX #$FA                ;Stack size
        TXS

        ; Init VIC
        CLD
        LDX #$09     ;#%00001001
_L00    LDA VIC_VALUES,X
        STA $D011,X             ;VIC Control Register 1
        DEX
        BPL _L00

        ; Init CIA
        LDA #$7F                ;Clear interrupt flags
        STA $DC0D               ;CIA1: CIA Interrupt Control Register
        LDA #$08                ;Set Timer A and B for One-shot
        STA $DC0E               ;CIA1: CIA Control Register A
        STA $DC0F               ;CIA1: CIA Control Register B
        LDX #$00                ;Set as Input
        STX $DC03               ;CIA1: Data Direction Register B
        DEX                     ;Set as Output
        STX $DC02               ;CIA1: Data Direction Register A

        LDA #$E5                ;$8000-$BFFF=RAM, $D000-$DFFF=I/O, $E000-$FFFF=RAM
        STA $01
        LDA #$2F                ;Default value
        STA $00

        LDA #$1A                ;Set Timer A (LSB)
        STA $DC04               ;CIA1: Timer A: Low-Byte
        LDA #$41                ;Set Timer A (MSB)
        STA $DC05               ;CIA1: Timer A: High-Byte
        LDA #$81                ;Enable Timer A
        STA $DC0D               ;CIA1: CIA Interrupt Control Register
        LDA #$11                ;Start Timer A
        STA $DC0E               ;CIA1: CIA Control Register A

        LDA #<IRQ_HANDLER_MAIN
        STA ZP_IRQ_LO
        LDA #>IRQ_HANDLER_MAIN
        STA ZP_IRQ_HI

        ; Init Variables
        CLI
        CLD
        LDA #$00
        STA ZP_SCORE_01
        STA ZP_SCORE_02
        STA ZP_SCORE_03
        STA a1B
        STA a1C
        STA ZP_TMP_REG_00
        STA ZP_TMP_REG_01
        STA ZP_SPEED_LO
        STA ZP_SPEED_HI
        STA a08
        STA a09
        STA ZP_TIME
        STA $D015               ;Disable all sprites

        ; Sprites from 0 to 5 have X & Y = 10
        LDY #$0A
_L01    STA $D000,Y             ;Sprite Pos
        DEY
        BPL _L01

        STA SHOULDER_LEFT_IDX
        LDA #$64
        STA SHOULDER_RIGHT_IDX
        LDA #$07
        STA ZP_ROAD_STATE
        JSR INIT_SCREEN

        ; Fallthrough

SET_IRQ_TO_WAIT_BUTTON
        SEI
        LDX #$FA                ;Stack
        TXS
        LDA #$00
        STA $D418               ;Select Filter Mode and Volume
        LDA #<IRQ_HANDLER_WAIT_BUTTON
        STA ZP_IRQ_LO
        LDA #>IRQ_HANDLER_WAIT_BUTTON
        STA ZP_IRQ_HI
        CLI
        CLD
        JMP PRINT_TITLE_SCREEN

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
IRQ_HANDLER_WAIT_BUTTON
        ; Read button from Paddle
        LDA #$FF                ;#%11111111
        STA $DC00               ;CIA1: Data Port Register A
        LDA $DC01               ;CIA1: Data Port Register B
        AND #$04
        BEQ _L00

        ; Read button from Joystick
        LDA #$FE                ;#%11111110
        STA $DC00               ;CIA1: Data Port Register A
        LDA $DC01               ;CIA1: Data Port Register B
        AND #$10                ;#%00010000
        BNE _L01

_L00    LDA #<IRQ_HANDLER_MAIN  ;#%00001000
        STA ZP_IRQ_LO
        LDA #>IRQ_HANDLER_MAIN  ;#%11100000
        STA ZP_IRQ_HI
        LDA $DC0D               ;CIA1: CIA Interrupt Control Register
        JMP INIT_GAME

_L01    JMP IRQ_HANDLER_MAIN

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
INIT_GAME
        SEI
        LDX #$FA                ;Stack
        TXS

        CLD
        CLI

        LDX #$00
        STX ZP_SCORE_01
        STX ZP_SCORE_02
        STX ZP_SCORE_03
        STX a1B
        STX a1C
        STX ZP_TMP_REG_01
        STX a26
        STX ZP_SPEED_LO
        STX ZP_SPEED_HI
        STX ZP_HEADLIGHT_DURATION
        STX a20
        STX ZP_BRAKE_FORCE
        STX ZP_FRAME_PTR_IDX
        STX ZP_SOUND_ENABLED
        STX ZP_IS_GAME_OVER
        STX a13
        STX a4B
        STX a4C
        STX ZP_TICK_COUNTER
        STX a53
        STX a54
        STX ZP_COLLISION_DETECTED
        STX a59
        STX ZP_SOUND_EFFECT_TO_PLAY
        STX ZP_SPLIT_ROAD_SPRITE_DISPLAYED
        STX a66
        STX a67
        STX f6B
        STX a6C
        STX a6D
        STX a6E
        STX ZP_PASSED_CARS_TOTAL
        STX ZP_ADD_1000_PTS
        STX a71
        STX a55
        STX a77
        STX a34
        STX a35
        STX a36
        STX a37
        STX ZP_UNUSED_30
        STX ZP_UNUSED_31
        STX ZP_UNUSED_32
        STX ZP_UNUSED_33
        STX $D017                       ;Sprites Expand 2x Vertical (Y)
        STX $D01B                       ;Sprite to Background Display Priority
        STX $D01D                       ;Sprites Expand 2x Horizontal (X)
        STX $D026                       ;Sprite Multi-Color Register 1
        STX SHOULDER_LEFT_IDX

        INX

        STX a2B
        STX a4E
        STX a4F

        LDA #$04
        STA a5A
        LDA #$06
        STA ZP_PIXELS_TO_MOVE_CAR
        LDA #$07
        STA ZP_ROAD_STATE
        LDA #$0F
        STA $D025                       ;Sprite Multi-Color Register 0
        LDA #60                         ;1 second = 60 ticks
        STA ZP_TICKS_PER_SECOND
        LDA #$60                        ;Initial time: 60 seconds (BCD)
        STA ZP_TIME
        LDA #$64
        STA SHOULDER_RIGHT_IDX
        LDA #$70
        STA a2A

        ; Only set Visible enemy cars and hero car sprites
        LDA #$8F                        ;#%10001111
        STA $D015                       ;Sprite display Enable
        LDA #$FF                        ;#%11111111
        STA $D01C                       ;Sprites Multi-Color Mode Select

        STA a50
        STA a51

        ; Init SID
        LDA #$00
        LDY #$18
_L00    STA $D400,Y                     ;Voice 1: Frequency Control - Low-Byte
        DEY
        BPL _L00

        LDA #$02
        STA $D403                       ;Voice 1: Pulse Waveform Width - High-Nybble
        STA $D40A                       ;Voice 2: Pulse Waveform Width - High-Nybble
        LDA #$08
        STA $D40C                       ;Voice 2: Attack / Decay Cycle Control
        LDA #$F9
        STA $D40D                       ;Voice 2: Sustain / Release Cycle Control
        LDA #$2F
        STA $D418                       ;Select Filter Mode and Volume
        LDA #$BE
        STA $D416                       ;Filter Cutoff Frequency: High-Byte
        LDA #$F0
        STA $D414                       ;Voice 3: Sustain / Release Cycle Control
        LDA #$FB
        STA $D406                       ;Voice 1: Sustain / Release Cycle Control

        JSR PRINT_SCORE_AND_TIME
        JSR PRINT_SPEED
        LDA #$0E                        ;Color Light Blue
        STA $D027                       ;Sprite 0 Color
        LDA #$F4                        ;Car pos 1
        STA SPR_FRAME_PTR_00
        LDA #137
        STA $D000                       ;Sprite 0 X Pos

        ; Scroll down 15 rows with a small delay betwen each
        LDX #15
_L01    STX ZP_TMP_REG_00
        JSR DRAW_ROAD_TOP_ROW
        JSR SCROLL_DOWN
        LDY #$01
        JSR DELAY_01
        LDX ZP_TMP_REG_00
        DEX
        BPL _L01

        ; Play "Engine" sound while we scroll down
        LDA #$0A
        STA $D401                       ;Voice 1: Frequency Control - High-Byte
        LDA #$41
        STA $D404                       ;Voice 1: Control Register

        ; Do the initial scroll down, where the car
        ; goes up, and the START banner appears with the traffic lights
        LDX #250                        ;The loop goes from 250 to 187
_L02    STX ZP_TMP_REG_00
        CPX #202
        BEQ _PRINT_START_TOP
        CPX #201
        BEQ _PRINT_TRAFFICLIGHT_BOTTOM
        CPX #200
        BEQ _PRINT_TRAFFICLIGHT_TOP
        CPX #203
        BNE _L10

        ; Print Start bottom row
        LDY #$1F
_L03    LDA START_BOTTOM_ROW_BANNER,Y
        STA SCREEN_RAM,Y
        LDA #$0A                        ;Color Light Red
        STA COLOR_RAM,Y
        DEY
        BPL _L03
        BMI _L11

_PRINT_TRAFFICLIGHT_BOTTOM
        JSR DRAW_ROAD_TOP_ROW
        LDY #$07
_L05    TYA
        AND #$01
        CLC
        ADC #$2D                        ;Traffic light bottom-left char
        STA SCREEN_RAM+4,Y
        LDA #$08                        ;Color Orange
        STA COLOR_RAM+4,Y
        DEY
        BPL _L05
        BMI _L11

_PRINT_TRAFFICLIGHT_TOP
        JSR DRAW_ROAD_TOP_ROW
        LDY #$07
_L07    TYA
        AND #$01
        CLC
        ADC #$2B                        ;Traffic light top-left char
        STA SCREEN_RAM+4,Y
        LDA #$08                        ;Color Orange
        STA COLOR_RAM+4,Y
        DEY
        BPL _L07
        BMI _L11

_PRINT_START_TOP
        LDY #$1F
_L09    LDA START_TOP_ROW_BANNER,Y
        STA SCREEN_RAM,Y
        LDA #$0A                        ;Color Light Red
        STA COLOR_RAM,Y
        DEY
        BPL _L09
        BMI _L11

        ; Scroll down one row
        ; And move the Hero car 8 pixel up
_L10    JSR DRAW_ROAD_TOP_ROW
_L11    JSR SCROLL_DOWN
        LDX ZP_TMP_REG_00
        TXA
        CLC
        ADC #$08
        STA $D001                       ;Sprite 0 Y Pos

        LDY #$01
        JSR DELAY_01

        ; Instead of going from 63 to 0, the loop goes from
        ; 250 to 187... possibly "let's tune it" hack
        DEX
        CPX #187
        BCC _L12

        JMP _L02

        ; Turn off "engine" sound
_L12    LDA #$00
        STA $D404                       ;Voice 1: Control Register

        LDY #$01
        JSR DELAY_00

        LDA #$05
        STA $D401                       ;Voice 1: Frequency Control - High-Byte
        LDA #$40                        ;#%01000000
        STA $D404                       ;Voice 1: Control Register

        LDY #$01
        JSR DELAY_00

        ; Initi sprite's positions and frames
        LDA #$0E                        ;Color Light Blue
        STA $D02E                       ;Sprite 7 Color
        LDA #$F4                        ;Sprite pointer: Stopped car
        STA SPR_FRAME_PTR_07
        LDA #195
        STA $D00F                       ;Sprite 7 Y Pos
        LDA #25
        STA $D001                       ;Sprite 0 Y Pos
        STA $D003                       ;Sprite 1 Y Pos
        STA $D005                       ;Sprite 2 Y Pos
        STA $D007                       ;Sprite 3 Y Pos
        LDA #137
        STA $D00E                       ;Sprite 7 X Pos
        STA $D000                       ;Sprite 0 X Pos
        STA $D002                       ;Sprite 1 X Pos
        STA $D004                       ;Sprite 2 X Pos
        STA $D006                       ;Sprite 3 X Pos

        LDX #$03
_L13    STX ZP_TMP_REG_00

        LDY #$02
        JSR DELAY_00

        LDA TRAFFICLIGHT_SID_FREQ_TBL,X
        STA $D408                       ;Voice 2: Frequency Control - High-Byte
        LDA #$11
        STA $D40B                       ;Voice 2: Control Register

        ; Print "trafficlight" background color
        LDA #$08                        ;Orange
        LDY #$07                        ;Number of columns to print
_L14    STA COLOR_RAM+40*14+4,Y
        STA COLOR_RAM+40*15+4,Y
        DEY
        BPL _L14

        LDA TRAFFICLIGHT_COLOR_RAM_POS_LO,X
        STA ZP_TMP_PTR_LO
        LDA TRAFFICLIGHT_COLOR_RAM_POS_HI,X
        STA ZP_TMP_PTR_HI

        LDA TRAFFICLIGHT_COLOR_TBL,X
        LDX #$03
_L15    LDY TWO_BY_TWO_OFFSET_TBL,X
        STA (ZP_TMP_PTR_LO),Y
        DEX
        BPL _L15

        LDY #$0A
        JSR DELAY_01

        LDX ZP_TMP_REG_00
        LDA TRAFFICLIGHT_SID_CONTROL_TBL,X
        STA $D40B                       ;Voice 2: Control Register
        DEX
        BPL _L13

        LDA #$00
        STA ZP_TMP_REG_00
        LDA #60                         ;For how long the left shoulder will be drawn
        STA ZP_LEFT_SHOULDER_ENABLED
        LDA #$08
        STA ZP_ROAD_STATE

        LDA #$90                        ;#%10010000
        STA $D40C                       ;Voice 2: Attack / Decay Cycle Control
        SEI
        LDA #<IRQ_HANDLER_GAME_LOOP
        STA ZP_IRQ_LO
        LDA #>IRQ_HANDLER_GAME_LOOP
        STA ZP_IRQ_HI
        CLI
        LDA #$01
        STA ZP_SOUND_ENABLED
        JMP MAIN_LOOP

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
TRAFFICLIGHT_COLOR_RAM_POS_LO
        .BYTE <(COLOR_RAM+40*14+10)
        .BYTE <(COLOR_RAM+40*14+8)
        .BYTE <(COLOR_RAM+40*14+6)
        .BYTE <(COLOR_RAM+40*14+4)
TRAFFICLIGHT_COLOR_RAM_POS_HI
        .BYTE >(COLOR_RAM+40*14+10)
        .BYTE >(COLOR_RAM+40*14+8)
        .BYTE >(COLOR_RAM+40*14+6)
        .BYTE >(COLOR_RAM+40*14+4)
TRAFFICLIGHT_COLOR_TBL
        .BYTE $0B,$0F,$0A,$0A           ;Dark Grey, Light Grey, Light Red, Light Red
TRAFFICLIGHT_SID_FREQ_TBL
        .BYTE $59,$2C,$2C,$2C
TRAFFICLIGHT_SID_CONTROL_TBL
        .BYTE $10,$00,$00,$00

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Initial screen, including the scrolling + animation
; Does not return (?)
PRINT_TITLE_SCREEN
        LDA #$07
        STA ZP_ROAD_STATE

        LDX #$00
_L00    STX ZP_TMP_REG_00
        JSR DRAW_ROAD_TOP_ROW

        LDX ZP_TMP_REG_00       ;Index of row to print
        LDY TITLE_ROWS_TBL,X    ;Choose which row to print
        LDX #$00
_L01    LDA TITLE_MSG,Y
        STA SCREEN_RAM+8,X
        LDA #$03                ;Cyan color
        STA COLOR_RAM+8,X
        INY
        INX
        CPX #16                 ;16 colums to draw per line
        BCC _L01

        JSR SCROLL_DOWN
        LDY #$02
        JSR DELAY_01

        LDX ZP_TMP_REG_00
        INX
        CPX #16                 ;16 rows in total (?)
        BCC _L00

        ; After print the Title Message Draw 4 rows of street
        LDX #$03
_L02    STX ZP_TMP_REG_00
        JSR DRAW_ROAD_TOP_ROW
        JSR SCROLL_DOWN

        LDY #$02
        JSR DELAY_01

        LDX ZP_TMP_REG_00
        DEX
        BPL _L02

        ; Stay forever, until F1 is pressed from IRQ Handler
_L03    LDY #$14
        JSR DELAY_01

        ; Blink 'Press F1...'
        LDA COLOR_RAM + 40 * 17 + 8
        EOR #$03                ;Switch between black and cyan
        LDY #$0F                ;16 columns to blink
_L04    STA COLOR_RAM+40*17+8,Y ;3 rows
        STA COLOR_RAM+40*18+8,Y
        STA COLOR_RAM+40*19+8,Y
        DEY
        BPL _L04
        JMP _L03

        ; (C) 1982 by Commodore electronics...
TITLE_MSG
        .ENC "screen"
        .BYTE $1B,$03,$1C,$20,$22,$2A,$29,$23   ; (C) 1982
        .TEXT         " BY     "
        .TEXT "   COMMODORE    "
        .TEXT "ELECTRONICS LTD",$1E             ; .
        .TEXT "      AND       "
        .TEXT " HAL LABORATORY "
        .TEXT "  PUSH ",$1D,$06,$22,$1D," OR  " ; 'F1'
        .TEXT "BUTTON ON PADDLE"
        .TEXT "    TO START    "
        .TEXT "                "

        ;
TITLE_ROWS_TBL
        .BYTE $80,$70,$60,$50,$80,$80,$80,$40
        .BYTE $80,$30,$80,$20,$10,$80,$00,$80

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Delay based on ticks. Register Y is number of ticks to wait
; Uses TIMER0_TRIGGERED
DELAY_00
_L00
        LDA #$00
        STA TIMER0_CNT
        STA TIMER0_TRIGGERED
_L01    LDA TIMER0_TRIGGERED
        BEQ _L01
        DEY
        BNE _L00
        RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Delay based on ticks. Register Y is number of ticks to wait
; Uses TIMER1_TRIGGERED
DELAY_01
_L00
        LDA #$00
        STA TIMER1_TRIGGERED
_L01    LDA TIMER1_TRIGGERED
        BEQ _L01
        DEY
        BNE _L00
        RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Clears the screen RAM with register A
CLEAR_SCREEN_RAM
        LDY #$00     ;#%00000000
_L00    STA SCREEN_RAM,Y
        STA SCREEN_RAM+$0100,Y
        STA SCREEN_RAM+$0200,Y
        STA SCREEN_RAM+$02E8,Y
        INY
        BNE _L00
        RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Setup screen, colors, etc.
INIT_SCREEN
        LDA #$44
        JSR CLEAR_SCREEN_RAM
        LDA #$00                ;Black
        STA $D020               ;Border Color
        STA $D021               ;Background Color 0
        LDA #$08                ;#%00001000
        STA $D022               ;Background Color 1, Multi-Color Register 0
        LDA #$0F                ;#%00001111
        STA $D023               ;Background Color 2, Multi-Color Register 1

        LDA #$0C                ;#%00001100
        LDY #$00
_L00    STA COLOR_RAM,Y
        STA COLOR_RAM+$0100,Y
        STA COLOR_RAM+$0200,Y
        STA COLOR_RAM+$02E8,Y
        INY
        BNE _L00

        LDA #<(SCREEN_RAM + 32)
        STA ZP_TMP_PTR_LO
        LDA #>(SCREEN_RAM + 32)
        STA ZP_TMP_PTR_HI

        ; Fill the right part of the screen with spaces
        LDX #24                 ;In total 24 rows

_L01    LDY #$07                ;7 colums: from 32 to 39
        LDA #$20                ;Space character
_L02    STA (ZP_TMP_PTR_LO),Y
        DEY
        BPL _L02

        LDA ZP_TMP_PTR_LO
        CLC
        ADC #$28     ;#%00101000
        STA ZP_TMP_PTR_LO
        LDA ZP_TMP_PTR_HI
        ADC #$00     ;#%00000000
        STA ZP_TMP_PTR_HI
        DEX
        BPL _L01

        LDY #$07                ;7 colums
_L03    LDA SCORE_MSG,Y
        STA SCREEN_RAM+40*1+32,Y
        LDA TIME_MSG,Y
        STA SCREEN_RAM+40*4+32,Y
        LDA HISCORE_MSG,Y
        STA SCREEN_RAM+40*7+32,Y
        LDA SPEED_MSG,Y
        STA SCREEN_RAM+40*10+32,Y

        LDA #$01                        ;White
        STA COLOR_RAM+40*1+32,Y         ;Color for 'Score' txt
        STA COLOR_RAM+40*10+32,Y        ;Color for 'Speed' txt
        STA COLOR_RAM+40*14+32,Y        ;Color for 'Extended' txt
        STA COLOR_RAM+40*15+32,Y        ;Color for '    Time' txt

        LDA #$03                        ;Cyan
        STA COLOR_RAM+40*4+32,Y         ;Color for 'Time' txt
        STA COLOR_RAM+40*11+32,Y        ;Color for Speed Dashboard top
        STA COLOR_RAM+40*12+32,Y        ;Color for Speed Dashboard bottom

        LDA #$04                        ;Purple
        STA COLOR_RAM+40*16+32,Y        ;Color to count the passed cars
        STA COLOR_RAM+40*17+32,Y        ;These is a grid of 3x3 cars
        STA COLOR_RAM+40*18+32,Y
        STA COLOR_RAM+40*19+32,Y
        STA COLOR_RAM+40*20+32,Y
        STA COLOR_RAM+40*21+32,Y

        LDA #$05                        ;Green
        STA COLOR_RAM+40*7+32,Y         ;Color for Hi-Score txt

        LDA #$07                        ;Yellow color for...
        STA COLOR_RAM+40*2+32,Y         ;... for Score value
        STA COLOR_RAM+40*5+32,Y         ;... for Time value
        STA COLOR_RAM+40*8+32,Y         ;... for Hi-Score value
        STA COLOR_RAM+40*23+32,Y        ;... for 'Bonus' txt
        STA COLOR_RAM+40*24+32,Y        ;... for '1000 PTS' txt
        DEY
        BPL _L03

        ; Print "KM/H"
        LDY #$71
        STY SCREEN_RAM+40*11+38         ;Place "K" of KM/H
        INY
        STY SCREEN_RAM+40*11+39         ;Place "M" of KM/H
        INY
        STY SCREEN_RAM+40*12+38         ;Place "/" of KM/H
        INY
        STY SCREEN_RAM+40*12+39         ;Place "H" of KM/H

        JSR PRINT_SCORE_AND_TIME
        JSR PRINT_SPEED

        LDA #<SCREEN_RAM
        STA ZP_TMP_PTR_LO
        LDA #>SCREEN_RAM
        STA ZP_TMP_PTR_HI

        LDX #$18                        ;x=24
_L04    LDY #$03                        ;y=3
_L05    CPY #$00
        BNE _L06

        TXA
        AND #$03
        BNE _L06
        LDA #$57                        ;Left shoulder char (?)
        BNE _L07

_L06    LDA SHOULDER_PATTERN_B0,Y
_L07    STA (ZP_TMP_PTR_LO),Y
        DEY
        BPL _L05
        LDA ZP_TMP_PTR_LO
        CLC
        ADC #40
        STA ZP_TMP_PTR_LO
        LDA ZP_TMP_PTR_HI
        ADC #$00
        STA ZP_TMP_PTR_HI
        DEX
        BPL _L04
        LDA #<(SCREEN_RAM+25)
        STA ZP_TMP_PTR_LO
        LDA #>(SCREEN_RAM+25)
        STA ZP_TMP_PTR_HI
        LDX #24
_L08    LDY #$03
_L09    CPY #$02
        BNE _L10
        TXA
        AND #$03
        BNE _L10
        LDA #$46                        ;Right shoulder char (?)
        BNE _L11
_L10    LDA SHOULDER_PATTERN_B3,Y
_L11    STA (ZP_TMP_PTR_LO),Y
        DEY
        BPL _L09
        LDA ZP_TMP_PTR_LO
        CLC
        ADC #40
        STA ZP_TMP_PTR_LO
        LDA ZP_TMP_PTR_HI
        ADC #$00
        STA ZP_TMP_PTR_HI
        DEX
        BPL _L08

        ; Set pointer to color ram
        LDA #<COLOR_RAM+7
        STA ZP_TMP_PTR_LO
        LDA #>COLOR_RAM+7
        STA ZP_TMP_PTR_HI

        ; Paint 25 * 20 of Light Blue (Road)
        LDX #24
_L12    LDY #19
        LDA #$0E                        ;Color Light Blue
_L13    STA (ZP_TMP_PTR_LO),Y
        DEY
        BPL _L13

        LDA ZP_TMP_PTR_LO
        CLC
        ADC #40
        STA ZP_TMP_PTR_LO
        LDA ZP_TMP_PTR_HI
        ADC #$00
        STA ZP_TMP_PTR_HI
        DEX
        BPL _L12

        ; Setup "row" properties
        LDX #24
_L14    LDA #26
        STA ZP_ROAD_X_LEFT_ROW_TBL,X
        LDA #224
        STA ZP_ROAD_X_RIGHT_ROW_TBL,X
        LDA #$07                        ;Regular "road mode"
        STA ZP_ROAD_STATE_ROW_TBL,X
        DEX
        BPL _L14
        RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
        .ENC "screen"
SCORE_MSG
        .TEXT " SCORE  "
TIME_MSG
        .TEXT "  TIME  "
HISCORE_MSG
        .TEXT "HI",$1F,"SCORE"
SPEED_MSG
        .TEXT " SPEED  "

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
SCROLL_DOWN
        LDY #31
_L00
        ; Screen RAM
        .FOR I:=23, I>=0, I-=1
        LDA SCREEN_RAM+40*I,Y
        STA SCREEN_RAM+40*(I+1),Y
        .NEXT

        ; Color RAM
        .FOR I:=23, I>=0, I-=1
        LDA COLOR_RAM+40*I,Y
        STA COLOR_RAM+40*(I+1),Y
        .NEXT

        DEY
        BMI _L01
        JMP _L00

_L01    LDY #23
_L02    LDA ZP_ROAD_X_LEFT_ROW_TBL,Y
        STA ZP_ROAD_X_LEFT_ROW_TBL+1,Y
        LDA ZP_ROAD_X_RIGHT_ROW_TBL,Y
        STA ZP_ROAD_X_RIGHT_ROW_TBL+1,Y
        LDA ZP_ROAD_STATE_ROW_TBL,Y
        STA ZP_ROAD_STATE_ROW_TBL+1,Y
        DEY
        BPL _L02
        RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
sE734
        STY ZP_TMP_4A
        LDY #$05     ;#%00000101
_L00    ASL a08
        ROL a09
        ROL A
        ROL A
        EOR a08
        ROL A
        EOR a08
        LSR A
        LSR A
        EOR #$FF     ;#%11111111
        AND #$01     ;#%00000001
        ORA a08
        STA a08
        DEY
        BPL _L00

        LDY ZP_TMP_4A
        RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Print Score and Time.
; Updates Hi-Score if Score is bigger than Hi-Score.
PRINT_SCORE_AND_TIME
        ; Check whether Score > Hi-Score
        LDA ZP_HI_SCORE_01
        SEC
        SBC ZP_SCORE_01
        LDA ZP_HI_SCORE_02
        SBC ZP_SCORE_02
        LDA ZP_HI_SCORE_03
        SBC ZP_SCORE_03
        BCS _L00

        ; Update Hi-Score
        LDA ZP_SCORE_01
        STA ZP_HI_SCORE_01
        LDA ZP_SCORE_02
        STA ZP_HI_SCORE_02
        LDA ZP_SCORE_03
        STA ZP_HI_SCORE_03

_L00
        ; Print Hi Score
        LDA #<HI_SCORE_OFFSET
        STA ZP_SCREEN_PTR_LO
        LDA #>HI_SCORE_OFFSET
        STA ZP_SCREEN_PTR_HI
        LDA #$00                ;Print "0" as " "
        STA ZP_ZERO_IS_ZERO
        TAY                     ;Y is screen offset
        LDA ZP_HI_SCORE_03
        STA ZP_BCD_TO_PRINT
        JSR PRINT_BCD
        LDA ZP_HI_SCORE_02
        STA ZP_BCD_TO_PRINT
        JSR PRINT_BCD
        LDA ZP_HI_SCORE_01
        STA ZP_BCD_TO_PRINT
        JSR PRINT_BCD
        LDA #$21                ;Append "0" after Hi-Score
        STA (ZP_SCREEN_PTR_LO),Y

        ; Print Score
        LDA #<SCORE_OFFSET
        STA ZP_SCREEN_PTR_LO
        LDA #>SCORE_OFFSET
        STA ZP_SCREEN_PTR_HI
        LDA #$00                ;Print "0" as " "
        STA ZP_ZERO_IS_ZERO
        TAY
        LDA ZP_SCORE_03
        STA ZP_BCD_TO_PRINT
        JSR PRINT_BCD
        LDA ZP_SCORE_02
        STA ZP_BCD_TO_PRINT
        JSR PRINT_BCD
        LDA ZP_SCORE_01
        STA ZP_BCD_TO_PRINT
        JSR PRINT_BCD
        LDA #$21                ;Append "0" after Score
        STA (ZP_SCREEN_PTR_LO),Y

        ; Print Time
        LDA #<TIME_OFFSET
        STA ZP_SCREEN_PTR_LO
        LDA #>TIME_OFFSET
        STA ZP_SCREEN_PTR_HI
        LDA #$00                ;Print "0" as " "
        STA ZP_ZERO_IS_ZERO
        TAY
        LDA ZP_TIME
        STA ZP_BCD_TO_PRINT
        JSR PRINT_BCD
        LDA ZP_ZERO_IS_ZERO
        BNE _L01
        DEY
        LDA #$21                ;Append a "0" after Time
        STA (ZP_SCREEN_PTR_LO),Y
_L01    RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Prints BCD character in ZP_SCREEN_PTR,Y
; Y gets incremented
; If ZP_ZERO_IS_ZERO, then '0' is printed as '0', otherwise as ' '
PRINT_BCD
        ; Print MSB first
        LDA ZP_BCD_TO_PRINT
        LSR A
        LSR A
        LSR A
        LSR A
        STA ZP_DIGIT_TO_PRINT
        JSR PRINT_DIGIT

        ; Print LSB after
        LDA ZP_BCD_TO_PRINT
        AND #$0F     ;#%00001111
        STA ZP_DIGIT_TO_PRINT

PRINT_DIGIT
        LDA ZP_DIGIT_TO_PRINT
        BNE _L01

        ; Determine how to print '0'. With ' ' or with '0'?
        LDX ZP_ZERO_IS_ZERO
        BNE _L01
        LDA #$20        ;Space character
        STA (ZP_SCREEN_PTR_LO),Y
        BNE _L02

_L01    CLC
        ADC #$21        ;Get correct number. $21 is "Zero"
        STA (ZP_SCREEN_PTR_LO),Y
        LDA #$01        ;#%00000001
        STA ZP_ZERO_IS_ZERO
_L02    INY             ;Update char pointer
        RTS

        ; Unused ?
        .BYTE $70,$E6,$60,$04,$04,$05

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
PRINT_SPEED
        LDX #$00        ;'0' is ' '
        STX ZP_ZERO_IS_ZERO
        LDA ZP_SPEED_HI
        AND #$0F     ;#%00001111
        STA ZP_DIGIT_TO_PRINT
        JSR _L00
        LDA ZP_SPEED_LO
        LSR A
        LSR A
        LSR A
        LSR A
        STA ZP_DIGIT_TO_PRINT
        JSR _L00
        LDA ZP_SPEED_LO
        AND #$0F     ;#%00001111
        STA ZP_DIGIT_TO_PRINT
        JSR _L00
        LDA ZP_ZERO_IS_ZERO
        BNE _L03
        INC ZP_ZERO_IS_ZERO
        DEX
        DEX
_L00    LDA ZP_DIGIT_TO_PRINT
        BNE _L01
        LDY ZP_ZERO_IS_ZERO
        BNE _L01
        LDY #$0A     ;#%00001010
        BNE _L02
_L01    TAY
        LDA #$01        ;'0' is '0'
        STA ZP_ZERO_IS_ZERO

        ; Update Speed Dashboard
_L02    LDA fE85D,Y
        STA SCREEN_RAM+40*11+32,X
        LDA fE868,Y
        STA SCREEN_RAM+40*11+33,X
        LDA fE873,Y
        STA SCREEN_RAM+40*12+32,X
        LDA fE87E,Y
        STA SCREEN_RAM+40*12+33,X
        INX
        INX
_L03    RTS

        ; Speed Dashboard top-left
fE85D   .BYTE $5B,$6D,$61,$61,$67,$6B,$6B,$5B
        .BYTE $6B,$6B,$6D
        ; Speed Dashboard top-right
fE868   .BYTE $5C,$5F,$62,$62,$68,$6C,$6C,$5C
        .BYTE $62,$62,$6E
        ; Speed Dashboard bottom-left
fE873   .BYTE $5D,$6F,$63,$65,$69,$65,$63,$6F
        .BYTE $63,$65,$6F
        ; Speed Dashboard bottom-right
fE87E   .BYTE $5E,$60,$64,$66,$6A,$66,$66,$60
        .BYTE $66,$66,$70

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Draw road (?)
DRAW_ROAD_TOP_ROW
        LDA ZP_HEADLIGHT_DURATION
        BEQ _L00
        DEC ZP_HEADLIGHT_DURATION

        ; Paint top row with "full" characters
_L00    LDY #31                 ;32 columns
        LDA #$44                ;"Full" character
_L01    STA SCREEN_RAM,Y
        DEY
        BPL _L01

        LDY ZP_ROAD_STATE
        LDA ROAD_COLOR_TBL,Y
        LDX #31                 ;32 columns
_L02    STA COLOR_RAM,X
        DEX
        BPL _L02

        INC a20
        LDA a20
        AND #$03     ;#%00000011
        STA a20

        LDA ZP_ROAD_STATE
        CMP #$05
        BCC _STATES_00_04
        JMP _STATES_05_08

        ; Road State 00-04
_STATES_00_04
        LDA SHOULDER_LEFT_IDX
        CMP #$10
        BCS _L04
        INC SHOULDER_LEFT_IDX

_L04    LDA SHOULDER_RIGHT_IDX
        CMP #$54
        BCS _L05
        INC SHOULDER_RIGHT_IDX
        JMP DRAW_SHOULDERS

_L05    INC a1B
        LDA a1B
        CMP #$08     ;#%00001000
        BCC _L09
        LDA #$00     ;#%00000000
        STA a1B

        LDA ZP_ROAD_STATE
        CMP #$03     ;#%00000011
        BCS _STATES_03_04
        CMP #$02     ;#%00000010
        BNE _STATES_00_01

        ; Road State 02: Night
        LDA #20
        STA ZP_HEADLIGHT_DURATION

        ; Road States 00, 01
_STATES_00_01
        JSR sE734
        LDA a08
        AND #$03     ;#%00000011
        BEQ _L09
        CMP #$03     ;#%00000011
        BEQ _L09
        CMP #$01     ;#%00000001
        BNE _L10

        ;SHOULDER_LEFT_IDX--
        LDA SHOULDER_LEFT_IDX
        SEC
        SBC #$01
        CMP #$10
        BCS _L07
        LDA #$10
_L07    STA SHOULDER_LEFT_IDX

        ;SHOULDER_RIGHT_IDX++
        LDA SHOULDER_RIGHT_IDX
        CLC
        ADC #$01
        CMP #$64
        BCC _L08
        LDA #$64
_L08    STA SHOULDER_RIGHT_IDX

_L09    JMP DRAW_SHOULDERS

_L10    LDA SHOULDER_LEFT_IDX
        CLC
        ADC #$01
        CMP #$20
        BCC _L11
        LDA #$20
_L11    STA SHOULDER_LEFT_IDX

        LDA SHOULDER_RIGHT_IDX
        SEC
        SBC #$01
        CMP #$54
        BCS _L08
        LDA #$54
        BNE _L08

_STATES_03_04
        CMP #$03
        BNE _STATE_04

        ; Road State 03
        LDA #$00     ;#%00000000
        STA a1C
        LDA SHOULDER_LEFT_IDX
        CMP #$11     ;#%00010001
        BCC _L13
        DEC SHOULDER_LEFT_IDX
_L13    CMP #$10     ;#%00010000
        BCS _L14
        INC SHOULDER_LEFT_IDX
_L14    LDA SHOULDER_RIGHT_IDX
        CMP #$54     ;#%01010100
        BCC _L15
        DEC SHOULDER_RIGHT_IDX
_L15    CMP #$53     ;#%01010011
        BCS _L09
        INC SHOULDER_RIGHT_IDX
        JMP DRAW_SHOULDERS

        ; Road State 04
_STATE_04
        LDA SHOULDER_LEFT_IDX
        CMP #$11     ;#%00010001
        BCC _L17
        DEC SHOULDER_LEFT_IDX
_L17    CMP #$10     ;#%00010000
        BCS _L18
        INC SHOULDER_LEFT_IDX
_L18    LDA SHOULDER_RIGHT_IDX
        CMP #$65     ;#%01100101
        BCC _L19
        DEC SHOULDER_RIGHT_IDX
_L19    CMP #$64     ;#%01100100
        BCS DRAW_SHOULDERS
        INC SHOULDER_RIGHT_IDX
        JMP DRAW_SHOULDERS

        ; Road States: 05-08
_STATES_05_08
        LDA ZP_ROAD_STATE
        CMP #$05     ;#%00000101
        BNE _STATES_06_08

        ; Road State 05: Turns
        INC a1C
        LDA a1C
        AND #$3F     ;#%00111111
        STA a1C
        TAY
        LDA TURN_OFFSET_TBL,Y
        CLC
        ADC #16
        STA SHOULDER_LEFT_IDX
        LDA TURN_OFFSET_TBL,Y
        CLC
        ADC #83
        STA SHOULDER_RIGHT_IDX
        JMP DRAW_SHOULDERS

_STATES_06_08
        CMP #$06     ;#%00000110
        BNE _STATES_07_08
        JMP DRAW_SPLIT_SCREEN

_STATES_07_08
        CMP #$07     ;#%00000111
        BNE _STATE_08

        ; Road State 07
        LDA SHOULDER_LEFT_IDX
        BEQ DRAW_SHOULDERS
        DEC SHOULDER_LEFT_IDX
        JMP DRAW_SHOULDERS

        ; Road State 08
_STATE_08
        LDA ZP_LEFT_SHOULDER_ENABLED
        BEQ _L20
        DEC ZP_LEFT_SHOULDER_ENABLED
        JMP DRAW_SHOULDERS

_L20    LDA SHOULDER_LEFT_IDX
        CMP #$0F     ;#%00001111
        BCC _L21

        LDA #$00     ;#%00000000
        STA ZP_ROAD_STATE
        BNE DRAW_SHOULDERS

_L21    INC SHOULDER_LEFT_IDX

        ; Fallthrough

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
DRAW_SHOULDERS
        LDA SHOULDER_LEFT_IDX           ;A = SHOULDER_LEFT_IDX
        ASL A                           ;A *= 2
        CLC
        ADC #24                         ;A += 24
        STA ZP_ROAD_X_LEFT_ROW_TBL

        LDA SHOULDER_RIGHT_IDX          ;A = SHOULDER_RIGHT_IDX
        ASL A                           ;A *= 2
        CLC
        ADC #24                         ;A += 24
        STA ZP_ROAD_X_RIGHT_ROW_TBL

        LDA SHOULDER_RIGHT_IDX          ;A = SHOULDER_RIGHT_IDX
        LSR A
        LSR A                           ;A /= 4
        STA a1D
        INC a1D

        LDA SHOULDER_LEFT_IDX           ;A = SHOULDER_LEFT_IDX
        LSR A
        LSR A                           ;A /= 4
        TAY
        INY

        LDA ZP_ROAD_STATE
        STA ZP_ROAD_STATE_ROW_TBL
        CMP #$07
        BCC _L00
        CPY #$06
        BCS _L00

        LDY #$06

_L00    LDX ZP_ROAD_STATE
        LDA ROAD_COLOR2_TBL,X
_L01    STA COLOR_RAM+1,Y
        INY
        CPY a1D
        BCC _L01

        ; Left Shoulder
        ; Setup Screen ptr
        LDA SHOULDER_LEFT_IDX
        LSR A                           ;SHOULDER_LEFT_IDX /= 4
        LSR A                           ;Since we draw 4 char shoulders
        STA ZP_TMP_PTR_LO               ;in this loop (?)
        LDA #$04
        STA ZP_TMP_PTR_HI

        ; Draw shoulder (4 chars)
        LDA SHOULDER_LEFT_IDX           ;Use the 2-LSB to index the pattern to print
        AND #$03
        TAY
        LDX SHOULDER_PATTERN_IDX_TBL,Y
        LDY #$00
_L02    LDA a20
        BNE _L03
        LDA SHOULDER_PATERN_A0,X
        BNE _L04
_L03    LDA SHOULDER_PATTERN_B0,X
_L04    STA (ZP_TMP_PTR_LO),Y
        INX
        INY
        CPY #$04                        ;Draw 4 shoulder chars;
        BCC _L02                        ;No, loop until we do so

        ; Right Shoulder
        ; Setup Screen ptr
        LDA SHOULDER_RIGHT_IDX
        LSR A                           ;SHOULDER_RIGHT_IDX /= 4
        LSR A                           ;Since we draw 4 char shoulders
        STA ZP_TMP_PTR_LO               ;in this loop
        LDA #$04
        STA ZP_TMP_PTR_HI

        ; Draw shoulder (4 chars)
        LDA SHOULDER_RIGHT_IDX
        AND #$03
        TAY
        LDX SHOULDER_PATTERN_IDX_TBL,Y
        LDY #$00
_L05    LDA a20
        BNE _L06
        LDA SHOULDER_PATTERN_A3,X
        BNE _L07
_L06    LDA SHOULDER_PATTERN_B3,X
_L07    STA (ZP_TMP_PTR_LO),Y
        INX
        INY
        CPY #$04                        ;Draw 4 shoulder chars?
        BCC _L05                        ;No, loop until we do so

        RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Road State 06: Split screen
DRAW_SPLIT_SCREEN
        LDY #$05     ;#%00000101
        LDA #$0E     ;#%00001110
_L00    STA COLOR_RAM+7,Y
        STA COLOR_RAM+19,Y
        DEY
        BPL _L00

        LDY #$03     ;#%00000011
_L01    LDA a20
        BNE _L02

        LDA SHOULDER_PATERN_A0,Y
        STA SCREEN_RAM+4,Y
        LDA SHOULDER_PATTERN_A1,Y
        STA SCREEN_RAM+16,Y
        LDA SHOULDER_PATTERN_A2,Y
        STA SCREEN_RAM+12,Y
        LDA SHOULDER_PATTERN_A3,Y
        STA SCREEN_RAM+25,Y
        BNE _L03

_L02    LDA SHOULDER_PATTERN_B0,Y
        STA SCREEN_RAM+4,Y
        LDA SHOULDER_PATTERN_B1,Y
        STA SCREEN_RAM+16,Y
        LDA SHOULDER_PATTERN_B2,Y
        STA SCREEN_RAM+12,Y
        LDA SHOULDER_PATTERN_B3,Y
        STA SCREEN_RAM+25,Y
_L03    DEY
        BPL _L01

        LDA #56
        STA ZP_ROAD_X_LEFT_ROW_TBL
        LDA #224
        STA ZP_ROAD_X_RIGHT_ROW_TBL
        LDA #$06
        STA ZP_ROAD_STATE_ROW_TBL
        RTS

ROAD_COLOR_TBL
        .BYTE $0D,$09,$08,$0D,$0D,$0A,$0B,$0C
        .BYTE $0C
ROAD_COLOR2_TBL
        .BYTE $0E,$09,$08,$0E,$0E,$0E,$0E,$0E
        .BYTE $0E

SHOULDER_PATTERN_A3
        .BYTE $40,$45,$46,$44,$41,$45,$47,$48
        .BYTE $42,$45,$45,$49
SHOULDER_PATTERN_A2
        .BYTE $43,$45,$45,$4A

SHOULDER_PATTERN_B3
        .BYTE $40,$45,$4B,$44,$41,$45,$47,$44
        .BYTE $42,$45,$45,$4C
SHOULDER_PATTERN_B2
        .BYTE $43,$45,$45,$4D

SHOULDER_PATERN_A0
        .BYTE $57,$52,$52,$51
SHOULDER_PATTERN_A1
        .BYTE $56,$52,$52,$50,$55,$54,$52,$4F
        .BYTE $44,$53,$52,$4E

SHOULDER_PATTERN_B0
        .BYTE $5A,$52,$52,$51
SHOULDER_PATTERN_B1
        .BYTE $59,$52,$52,$50,$44,$54,$52,$4F
        .BYTE $44,$58,$52,$4E

SHOULDER_PATTERN_IDX_TBL
        .BYTE $00,$04,$08,$0C

        ; Used to draw the "turns".
        ; Offset to the byte to draw (?)
TURN_OFFSET_TBL
        .BYTE $00,$00,$01,$01,$01,$02,$02,$02
        .BYTE $03,$03,$04,$04,$05,$06,$07,$08
        .BYTE $09,$0A,$0B,$0C,$0D,$0D,$0E,$0E
        .BYTE $0F,$0F,$0F,$10,$10,$10,$11,$11
        .BYTE $11,$11,$10,$10,$10,$0F,$0F,$0F
        .BYTE $0E,$0E,$0D,$0D,$0C,$0B,$0A,$09
        .BYTE $08,$07,$06,$05,$04,$04,$03,$03
        .BYTE $02,$02,$02,$01,$01,$01,$00,$00

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Not 100% sure that is the the main loop, but looks like it
MAIN_LOOP
        LDA ZP_SPEED_LO
        BNE _L00
        LDA ZP_SPEED_HI
        BNE _L00

        ; Speed is 0
        LDA #$F4     ;Sprite pointer: Stopped car
        STA SPR_FRAME_PTR_07
        JMP _L11

_L00    LDA ZP_ROAD_STATE
        CMP #$08     ;#%00001000
        BEQ _L02

        INC ZP_TMP_REG_01
        LDA ZP_TMP_REG_01
        CMP #$FA     ;#%11111010
        BCC _L02

        LDA #$00     ;#%00000000
        STA ZP_TMP_REG_01
        LDY ZP_TMP_REG_00
        INY
        CPY #$28     ;#%00101000
        BCC _L01

        LDY #32
_L01    STY ZP_TMP_REG_00
        LDA ROAD_STATE_TBL,Y
        STA ZP_ROAD_STATE
_L02    JSR DRAW_ROAD_TOP_ROW
        JSR SCROLL_DOWN
        JSR INCREMENT_SCORE
        JSR sEDDF

        ; Check collision with shoulder
        LDA $D00F               ;A = Sprite 7 Y Pos
        LSR A
        LSR A
        LSR A                   ;A /= 8
        SEC
        SBC #$05                ;A -= 5
        TAY
        LDA ZP_ROAD_X_LEFT_ROW_TBL,Y
        CMP $D00E               ;Sprite 7 X Pos
        BCS _L04

        CLC
        ADC #24
        CMP $D00E               ;Sprite 7 X Pos
        BCS _L03

        LDA ZP_ROAD_X_RIGHT_ROW_TBL,Y
        CLC
        ADC #$02
        CMP $D00E               ;Sprite 7 X Pos
        BCC _L04

        SEC
        SBC #22
        CMP $D00E               ;Sprite 7 X Pos
        BCC _L03

        LDA #$05
        STA ZP_PIXELS_TO_MOVE_CAR

        ; Car is not colliding with shoulder
        ; NOTE(riq): Disable Rumble here
        LDA #$00
        STA ZP_BRAKE_FORCE
        STA ZP_SOUND_EFFECT_TO_PLAY
        BEQ _L05

        ; Car is colliding with shoulder,
        ; but this is not a crash yet, just warning.
        ; NOTE(riq): Enable Rumble here
_L03    LDA #$01
        STA ZP_PIXELS_TO_MOVE_CAR       ;Limit car horizontal movement
        STA ZP_BRAKE_FORCE              ;Apply brake, so car cannot speed up
        STA ZP_SOUND_EFFECT_TO_PLAY     ;Play noise
        BNE _L05

_L04    JMP DO_COLLISION

_L05    LDA ZP_ROAD_STATE_ROW_TBL,Y
        CMP #$01
        BNE _L06

        ; Ice
        LDA ZP_PIXELS_TO_MOVE_CAR
        CMP #$05
        BNE _L06
        LDA #$02
        STA ZP_PIXELS_TO_MOVE_CAR
        STA ZP_SOUND_EFFECT_TO_PLAY

_L06    LDA ZP_ROAD_STATE_ROW_TBL,Y
        CMP #$06
        BNE _L07
        LDA #108
        CMP $D00E                       ;Sprite 7 X Pos
        BCS _L07
        LDA #179
        CMP $D00E                       ;Sprite 7 X Pos
        BCC _L07
        LDA #$01
        STA ZP_PIXELS_TO_MOVE_CAR
        STA ZP_BRAKE_FORCE
        STA ZP_SOUND_EFFECT_TO_PLAY
        LDA #129
        CMP $D00E                       ;Sprite 7 X Pos
        BCS _L07
        LDA #158
        CMP $D00E                       ;Sprite 7 X Pos
        BCC _L07
        JMP DO_COLLISION

_L07    LDY ZP_PIXELS_TO_MOVE_CAR
.IF USE_JOYSTICK == 0
        ;Update car X position based on Paddle reading
_L08    LDA ZP_PADDLE_1_VALUE_INV
        CMP $D00E    ;Sprite 7 X Pos
        BCS _L09

        ; Move Hero to the left
        DEC $D00E    ;Sprite 7 X Pos
        JMP _L10

        ; Move Hero to the right
_L09    INC $D00E    ;Sprite 7 X Pos
.ELSE
        ;Update car X position based on Joystick #1
_L08    LDA ZP_PADDLE_1_VALUE_INV
        AND #%00000100                  ;Left (Active Low)
        BNE _TEST_RIGHT

        ; Move Hero to the left
        DEC $D00E    ;Sprite 7 X Pos
        JMP _L10

_TEST_RIGHT
        LDA ZP_PADDLE_1_VALUE_INV
        AND #%00001000                  ;Right (Active Low)
        BNE _L10
        INC $D00E    ;Sprite 7 X Pos
.ENDIF
_L10    DEY
        BPL _L08

_L11    LDA ZP_HEADLIGHT_DURATION
        BEQ _L13
        CMP #$01
        BNE _L12

        ; Turn off headlights (sprites 4-6)
        LDA $D015                       ;Sprite display Enable
        AND #$8F                        ;#%10001111
        STA $D015                       ;Sprite display Enable
        JMP _L13

        ; Turn On Headlights (sprites 4-6)
_L12    LDA $D015                       ;Sprite display Enable
        ORA #$70                        ;#%01110000
        STA $D015                       ;Sprite display Enable
        LDA #$70                        ;#%01110000
        STA $D017                       ;Sprites Expand 2x Vertical (Y)
        STA $D01D                       ;Sprites Expand 2x Horizontal (X)
        LDA $D01C                       ;Sprites Multi-Color Mode Select
        AND #$8F                        ;#%10001111
        STA $D01C                       ;Sprites Multi-Color Mode Select
        LDA #$0C                        ;Color Grey 2
        STA $D02B                       ;Sprite 4 Color
        STA $D02C                       ;Sprite 5 Color
        LDA #$0F                        ;Color Grey 3
        STA $D02D                       ;Sprite 6 Color
        LDY #$FC                        ;Headlight top-left
        STY SPR_FRAME_PTR_04
        INY                             ;Headlight top-right
        STY SPR_FRAME_PTR_05
        INY                             ;Headlight center
        STY SPR_FRAME_PTR_06

        ; Adjust headlights sprites based on Car's position
        ; Adjust Y position
        LDA $D00F                       ;Sprite 7 Y Pos
        SEC
        SBC #42                         ;Sprite 6.Y = Car.Y - 42
        STA $D00D                       ;Sprite 6 Y Pos (Central Headlight)
        SEC
        SBC #32                         ;Sprite 5/4.Y = Car.Y - 74 (-42 - 32)
        STA $D00B                       ;Sprite 5 Y Pos (Top-Right headlight)
        STA $D009                       ;Sprite 4 Y Pos (Top-Left headlight)

        ; Adjust X position
        LDA $D00E                       ;Sprite 7 X Pos
        CLC
        ADC #10                         ;Sprite 5.X = Hero.X + 10
        STA $D00A                       ;Sprite 5 X Pos (Top-Right headlight)
        SEC
        SBC #24                         ;Sprite 6.X = Hero.X - 14 (10 - 24 )
        STA $D00C                       ;Sprite 6 X Pos (Central Headlight)
        SEC
        SBC #24                         ;Sprite 6.X = Hero.X - 38 (10 - 24 - 24)
        STA $D008                       ;Sprite 4 X Pos (Top-Left headlight)

_L13    LDA ZP_IS_GAME_OVER
        BEQ _L14
        JSR GAME_OVER

_L14    LDA ZP_COLLISION_DETECTED
        BEQ _L15
        JMP DO_COLLISION

_L15    JMP MAIN_LOOP

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
START_TOP_ROW_BANNER
        .BYTE $79,$79,$79,$79,$79,$79,$79,$91
        .BYTE $92,$79,$79,$95,$96,$79,$79,$7A
        .BYTE $7E,$79,$79,$85,$8E,$79,$79,$95
        .BYTE $96,$79,$79,$79,$79,$79,$79,$79

START_BOTTOM_ROW_BANNER
        .BYTE $79,$79,$79,$79,$79,$79,$79,$93
        .BYTE $94,$79,$79,$97,$79,$79,$79,$7F
        .BYTE $80,$79,$79,$8F,$90,$79,$79,$97
        .BYTE $79,$79,$79,$79,$79,$79,$79,$79

ROAD_STATE_TBL
        .BYTE $00,$01,$02,$03,$05,$04,$06,$03
        .BYTE $05,$00,$02,$00,$01,$00,$04,$06
        .BYTE $00,$02,$00,$03,$05,$00,$01,$00
        .BYTE $04,$06,$00,$01,$00,$02,$04,$06
        .BYTE $00,$02,$03,$05,$00,$01,$04,$06

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
;Collision detected, do the collision animation (?)
DO_COLLISION
        LDY #$02
        STY ZP_BRAKE_FORCE
        DEY
        STY a59
        STY a77
        DEY
        STY ZP_SOUND_EFFECT_TO_PLAY
        STY ZP_SPLIT_ROAD_SPRITE_DISPLAYED
        STY $D017                       ;Sprites Expand 2x Vertical (Y)
        STY $D01D                       ;Sprites Expand 2x Horizontal (X)
        STY ZP_HEADLIGHT_DURATION

        ; Turn off headlights sprites
        ; And turn on "Flames" sprites
        LDA $D015                       ;Sprite display Enable
        AND #$EF                        ;#%11101111
        ORA #$60                        ;#%01100000
        STA $D015                       ;Sprite display Enable

        ; No Multicolor for "Flames" sprites
        LDA $D01C                       ;Sprites Multi-Color Mode Select
        AND #$9F                        ;#%10011111
        STA $D01C                       ;Sprites Multi-Color Mode Select

        ; Set color for "Flames" sprites
        LDA #$0F                        ;Color Grey 3
        STA $D02D                       ;Sprite 6 Color
        LDA #$0C                        ;Color Grey 2
        STA $D02C                       ;Sprite 5 Color

        ; Set correct sprite frames for "Flames" sprites
        LDY #$F8                        ;Flames1 sprite
        STY SPR_FRAME_PTR_06
        INY                             ;Flames 2 sprite
        STY SPR_FRAME_PTR_05

        LDA #$07                        ; Set Road State to "normal"
        STA ZP_ROAD_STATE

        LDY #35                         ;Draw 35 rows
_L00    STY ZP_TMP_REG_01

        LDA ZP_IS_GAME_OVER
        BEQ _L01
        JSR GAME_OVER

_L01    JSR DRAW_ROAD_TOP_ROW
        JSR SCROLL_DOWN
        JSR INCREMENT_SCORE
        JSR sEDDF
        LDY ZP_TMP_REG_01
        DEY
        BPL _L00

_L02    LDX #$03        ;#%00000011
        LDY $D00E       ;Sprite 7 X Pos
_L03    CPY #$32        ;#%00110010
        BCC _L04
        DEY
        DEX
        BPL _L03
        STY $D00E    ;Sprite 7 X Pos
        JSR DRAW_ROAD_TOP_ROW
        JSR SCROLL_DOWN
        JSR INCREMENT_SCORE
        JSR sEDDF

        LDA ZP_IS_GAME_OVER
        BEQ _L02
        JSR GAME_OVER
        JMP _L02

_L04    LDA #$03
        STA ZP_BRAKE_FORCE
_L05    LDA ZP_SPEED_LO
        BNE _L06
        LDA ZP_SPEED_HI
        BEQ _L07
_L06    JSR DRAW_ROAD_TOP_ROW
        JSR SCROLL_DOWN
        JSR INCREMENT_SCORE
        JSR sEDDF

        LDA ZP_IS_GAME_OVER
        BEQ _L05
        JSR GAME_OVER
        JMP _L05

_L07    LDA $D015    ;Sprite display Enable
        AND #$8F     ;#%10001111
        STA $D015    ;Sprite display Enable
        LDA #$2F     ;#%00101111
        STA $D418    ;Select Filter Mode and Volume
        LDA #$BE     ;#%10111110
        STA $D416    ;Filter Cutoff Frequency: High-Byte
        LDA #$F0     ;#%11110000
        STA $D417    ;Filter Resonance Control / Voice Input Control
        LDA #$00     ;#%00000000
        STA ZP_FRAME_PTR_IDX
        STA a44
        STA ZP_BRAKE_FORCE
        STA a59
        STA ZP_COLLISION_DETECTED
        STA ZP_PASSED_CARS_TOTAL
        STA a77
        LDA #60
        STA ZP_LEFT_SHOULDER_ENABLED
        LDA #$08
        STA ZP_ROAD_STATE
        LDY ZP_TMP_REG_00
        LDA ROAD_STATE_TBL,Y
        BEQ _L08
        CMP #$03     ;#%00000011
        BEQ _L08
        CMP #$04     ;#%00000100
        BEQ _L08
        BNE _L09
_L08    DEC ZP_TMP_REG_00
_L09    LDA #$FA     ;#%11111010
        STA ZP_TMP_REG_01
        JMP MAIN_LOOP

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Called after SCROLL_DOWN
sEDDF   LDA a3A
        STA a3D
        LDA a3B
        STA a3E
_L00    LDA a3D
        SEC
        SBC #$01     ;#%00000001
        STA a3D
        LDA a3E
        SBC #$00     ;#%00000000
        STA a3E
        BCS _L00
        LDY a44
        INY
        CPY #$02     ;#%00000010
        BCC _L01
        LDY #$00     ;#%00000000

        ; Switch between "stopped car" and "moving car"
        LDA ZP_FRAME_PTR_IDX
        EOR #$01     ;#%00000001
        AND #$01     ;#%00000001
        STA ZP_FRAME_PTR_IDX
        CLC
        ADC #$F4     ;#%11110100
        STA SPR_FRAME_PTR_07

_L01    STY a44
        RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
INCREMENT_SCORE
        ; Score++
        SED
        LDA ZP_SCORE_01
        CLC
        ADC #$01
        STA ZP_SCORE_01
        LDA ZP_SCORE_02
        ADC #$00
        STA ZP_SCORE_02
        LDA ZP_SCORE_03
        ADC #$00
        STA ZP_SCORE_03

        CLD
        LDA ZP_SCORE_01
        BNE _L00
        LDA ZP_SCORE_02
        AND #$1F
        BNE _L00

        INC a53
        LDA #$5F
        STA a55

        ; Unused / Incomplete code
        ; Possible incomplete code about rewarding something
        ; when certain points were reached

_L00    LDY #$01
        LDA ZP_SCORE_02
        CMP #$40
        BEQ _L01

        CMP #$20
        BEQ _L02

        CMP #$05
        BEQ _L03

        CMP #$02
        BEQ _L04
        BNE _L05

_L01    STY ZP_UNUSED_33                 ;Score is 40xx ? (unused)
_L02    STY ZP_UNUSED_32                 ;Score is 20xx ? (unused)
_L03    STY ZP_UNUSED_31                 ;Score is 05xx ? (unused)
_L04    STY ZP_UNUSED_30                 ;Score is 02xx ? (unused)
_L05    RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
IRQ_HANDLER_GAME_LOOP
        LDA a13
        BEQ _L00
        SED
        JMP _L05

_L00    LDA #$40                ;#%01000000
        STA $DC00               ;CIA1: Data Port Register A

.IF USE_JOYSTICK == 0
        LDA $D419               ;Analog/Digital Converter: Game Paddle 1
        STA ZP_PADDLE_1_VALUE

        CMP #$BC                ;#%10111100
        BCC _L01

        LDA #$BC
        STA ZP_PADDLE_1_VALUE

_L01    LDA #$EC
        SEC
        SBC ZP_PADDLE_1_VALUE
        STA ZP_PADDLE_1_VALUE_INV
        LDA ZP_BRAKE_FORCE
        CMP #$02
        BCS _L02
.ELSE
        LDA $DC01
        STA ZP_PADDLE_1_VALUE_INV
        JMP _TEST_BUTTON
.ENDIF

_TEST_BUTTON

        LDA $DC01                       ;CIA1: Data Port Register B
.IF USE_JOYSTICK == 0
        AND #%00000100
.ELSE
        AND #%00010000
.ENDIF
        BNE _L07

        ; Button pressed
_L02    SED
        LDA ZP_BRAKE_FORCE
        BEQ _L05
        CMP #$01
        BEQ _L03
        CMP #$03
        BEQ _L07
        LDA #$50
        SEC
        SBC ZP_SPEED_LO
        LDA #$00
        SBC ZP_SPEED_HI
        BCC _L04
        BCS _L09
_L03    LDA #$50
        SEC
        SBC ZP_SPEED_LO
        LDA #$01
        SBC ZP_SPEED_HI
        BCS _L05
_L04    LDA ZP_SPEED_LO
        SEC
        SBC #$02
        STA ZP_SPEED_LO
        LDA ZP_SPEED_HI
        SBC #$00
        STA ZP_SPEED_HI
        JMP _L06

_L05    LDY ZP_SPEED_HI                 ;Values from 0 to 3 (0xx, 1xx, 2xx, 3xx)
        LDA ACCELERATION_TBL_LO,Y
        STA a68
        LDA ACCELERATION_TBL_HI,Y
        STA a69

        LDA a29
        CLC
        ADC a68
        STA a29

        LDA ZP_SPEED_LO
        ADC a69
        STA ZP_SPEED_LO
        LDA ZP_SPEED_HI
        ADC #$00
        STA ZP_SPEED_HI

_L06    LDA #$20
        SEC
        SBC ZP_SPEED_LO
        LDA #$03
        SBC ZP_SPEED_HI
        BCS _L09
        LDA #$03
        STA ZP_SPEED_HI
        LDA #$20
        STA ZP_SPEED_LO
        JMP _L09

        ; Button not pressed
_L07    LDA ZP_SPEED_HI
        BNE _L08
        LDA ZP_SPEED_LO
        BEQ _L09
_L08    SED
        LDA ZP_SPEED_LO
        SEC
        SBC #$02
        STA ZP_SPEED_LO
        LDA ZP_SPEED_HI
        SBC #$00
        STA ZP_SPEED_HI

_L09    LDA ZP_SPEED_HI
        CMP #$04
        BCC _L10
        LDA #$00
        STA ZP_SPEED_LO
        STA ZP_SPEED_HI
_L10    CLD
        JSR PRINT_SCORE_AND_TIME
        INC a6A
        LDA a6A
        AND #$07
        BNE _L11
        JSR PRINT_SPEED
_L11    LDA ZP_SPEED_LO
        LSR A
        LSR A
        LSR A
        LSR A
        LDX ZP_SPEED_HI
        CLC
        ADC fF2E3,X
        STA a3C
        TAY
        LDA fF2A3,Y
        STA a3A
        LDA fF2C3,Y
        STA a3B
        LDA ZP_SOUND_ENABLED
        BEQ _L12
        LDA #195
        SEC
        SBC a3C
        STA $D00F                       ;Sprite 7 Y Pos

_L12    LDA ZP_ROAD_STATE
        CMP #$07
        BNE _L14

        ; Road state 07: Initial state
        LDY $D00F                       ;Sprite 7 Y Pos
        INY
        STY $D00D                       ;Sprite 6 Y Pos
        INY
        STY $D00B                       ;Sprite 5 Y Pos
        LDA $D00E                       ;Sprite 7 X Pos
        STA $D00C                       ;Sprite 6 X Pos
        STA $D00A                       ;Sprite 5 X Pos
        LDY ZP_FLAME_ANIM_DELAY
        INY
        CPY #10
        BCC _L13
        LDY #$00

        ; Switch between Flames 00 and Flames 01 sprite pointers
        LDA ZP_FLAME_FRAME_IDX
        EOR #$01
        AND #$01
        STA ZP_FLAME_FRAME_IDX

        CLC
        ADC #$F8                        ;Flames sprite frame
        STA SPR_FRAME_PTR_06

        AND #$01
        EOR #$01
        CLC
        ADC #$F8                        ;Flames sprite frmae
        STA SPR_FRAME_PTR_05

_L13    STY ZP_FLAME_ANIM_DELAY

_L14    LDA ZP_ROAD_STATE
        CMP #$04
        BNE _L18

        ; Road State 04: Show Split Screen sprite
        LDA ZP_TMP_REG_01
        CMP #$A0
        BCC _L18
        CMP #$F0
        BCS _L16
        CMP #$A0
        BNE _L15

        ; Show Split Screen sprite
        LDA #$40                        ;#%01000000
        STA $D017                       ;Sprites Expand 2x Vertical (Y)
        STA $D01D                       ;Sprites Expand 2x Horizontal (X)
        LDA $D01C                       ;Sprites Multi-Color Mode Select
        ORA #$40                        ;#%01000000
        STA $D01C                       ;Sprites Multi-Color Mode Select
        LDA #$03                        ;Color Cyan
        STA $D02D                       ;Sprite 6 Color
        LDA #$FB                        ;Split road ahead sprite frame
        STA SPR_FRAME_PTR_06
        LDA #58
        STA $D00D                       ;Sprite 6 Y Pos
        LDA #129
        STA $D00C                       ;Sprite 6 X Pos
        LDA #$00
        STA a47
        STA a48
_L15    LDY a47
        INY
        CPY #$08
        BCC _L17
        LDY #$00
        LDA a48
        EOR #$01
        STA a48
        BEQ _L16

        ; Enable "Split road" sprite
        LDA $D015                       ;Sprite display Enable
        ORA #$40                        ;#%01000000
        STA $D015                       ;Sprite display Enable
        LDA #$01
        STA ZP_SPLIT_ROAD_SPRITE_DISPLAYED
        BNE _L17

        ; Disable "Split road" sprite
_L16    LDA $D015                       ;Sprite display Enable
        AND #$BF                        ;#%10111111
        STA $D015                       ;Sprite display Enable
        LDA #$00
        STA ZP_SPLIT_ROAD_SPRITE_DISPLAYED

_L17    STY a47

        ; Remaining of Road States
_L18    LDA ZP_SOUND_ENABLED
        BEQ _L20

        LDA ZP_TIME
        BEQ _L19

        ; Compare if number of ticks >= Ticks per second
        LDY ZP_TICK_COUNTER
        INY
        CPY ZP_TICKS_PER_SECOND
        BCC _L20

        ; Time = Time -1
        LDY #$00
        SED
        LDA ZP_TIME
        SEC
        SBC #$01
        STA ZP_TIME
        CLD
        JMP _L20

        ; Enable Game Over animation
_L19    LDA #$01
        STA ZP_IS_GAME_OVER

_L20    STY ZP_TICK_COUNTER
        SED
        LDA ZP_SPEED_LO
        SEC
        SBC a2A
        LDA ZP_SPEED_HI
        SBC a2B
        BCS _L21

        LDA #$01
        STA a4D
        LDA a2A
        SEC
        SBC ZP_SPEED_LO
        STA a2C
        LDA a2B
        SBC ZP_SPEED_HI
        STA a2D
        JSR sF227
        JMP _L22

_L21    LDA #$00
        STA a4D
        LDA ZP_SPEED_LO
        SEC
        SBC a2A
        STA a2C
        LDA ZP_SPEED_HI
        SBC a2B
        STA a2D
        JSR sF227

_L22    LDX #$03                        ;Compare with sprites 0-3
_L23    TXA
        ASL A                           ;A = X * 2
        STA ZP_TMP_49                   ;Store value in tmp variable
        TAY
        LDA $D001,Y                     ;Sprite 0 Y Pos
        CMP #29
        BCC _L26                        ;EnemyCar.Y < 29
        CMP #50
        BCC _L25                        ;EnemyCar.Y < 50

        CPX a5A
        BNE _L24
        LDA #$04
        STA a5A
_L24    JMP _L30


        ; 29 <= EnemyCar.Y < 50
_L25    STX a5A                         ;X has Sprite Index
        JMP _L30

        ; EnemyCar.Y < 29
_L26    LDA #$00
        STA f6B,X
        CPX a5A
        BNE _L28
        LDA f30,X
        BNE _L30
        LDA #$04
        STA a5A
_L27    JMP _L32

_L28    LDA a5A
        CMP #$04
        BNE _L27
        LDA f30,X
        BEQ _L27
        JSR sE734
        LDA a08
        AND #$1F
        BNE _L27
        STX a5A
        JSR sE734
        LDA a08
        AND #$07
        TAY
        LDA ENEMY_CAR_COLOR_TBL,Y
        STA $D027,X                     ;Sprite 0 Color
        LDA ZP_ROAD_STATE_ROW_TBL
        CMP #$06
        BEQ _L29
        LDA ZP_ROAD_STATE_ROW_TBL+24
        CMP #$06
        BEQ _L29
        JSR sE734
        LDA a08
        AND #$3F
        CLC
        ADC #110
        LDY ZP_TMP_49
        STA $D000,Y                     ;Sprite 0 X Pos
        JSR sE734
        LDA a08
        AND #$01
        STA f5D,X
        JSR sE734
        LDA a08
        AND #$02
        TAY
        DEY
        STY f4E,X
        JMP _L30

_L29    JSR sE734
        LDA a08
        AND #$03
        TAY
        LDA fF2EF,Y
        LDY ZP_TMP_49
        STA $D000,Y                     ;Sprite 0 X Pos
        LDA #$01
        STA f5D,X
_L30    LDY ZP_TMP_49
        LDA a4D
        BNE _L31
        LDA f34,X
        CLC
        ADC a2C
        STA f34,X
        LDA $D001,Y                     ;Sprite 0 Y Pos
        ADC a2D
        STA $D001,Y                     ;Sprite 0 Y Pos
        JMP _L33

_L31    LDA f34,X
        SEC
        SBC a2C
        STA f34,X
        LDA $D001,Y                     ;Sprite 0 Y Pos
        SBC a2D
        STA $D001,Y                     ;Sprite 0 Y Pos
        JMP _L33

_L32    LDY ZP_TMP_49
        LDA #25
        STA $D001,Y                     ;Sprite 0 Y Pos
_L33    LDA ZP_ROAD_STATE
        CMP #$04
        BNE _L34
        LDA ZP_TMP_REG_01
        CMP #200
        BCC _L34
        LDA $D000,Y                     ;Sprite 0 X Pos
        CMP #107
        BCC _L36
        CMP #179
        BCS _L36
        LDA $D000,Y                     ;Sprite 0 X Pos
        CLC
        ADC f4E,X
        STA $D000,Y                     ;Sprite 0 X Pos
        JMP _L36

_L34    LDA f5D,X
        BNE _L36
        LDA ZP_ROAD_STATE
        CMP #$06
        BEQ _L36
        LDA ZP_ROAD_STATE_ROW_TBL+24
        CMP #$06
        BEQ _L36
        LDA $D000,Y                     ;Sprite 0 X Pos
        CLC
        ADC f4E,X
        STA $D000,Y                     ;Sprite 0 X Pos
        CMP #103
        BCS _L35
        LDA #$01
        STA f4E,X
        BNE _L36
_L35    CMP #183
        BCC _L36
        LDA #$FF
        STA f4E,X
_L36    LDY ZP_TMP_49
        LDA $D001,Y                     ;Sprite 0 Y Pos
        LSR A
        LSR A
        LSR A
        SEC
        SBC #$05
        TAY
        LDA ZP_ROAD_STATE_ROW_TBL,Y
        CMP #$02
        BNE _L37
        LDA #$FA                        ;Enemy Night car frame
        STA SPR_FRAME_PTR_00,X
        BNE _L38
_L37    LDA #$F6                        ;Enemy Car 00
        STA SPR_FRAME_PTR_00,X
_L38    LDY ZP_TMP_49
        LDA $D001,Y                     ;Sprite 0 Y Pos
        CMP #50
        BCC _L39
        CMP #60
        BCS _L39

        LDA #$01
        STA f6B,X
_L39    LDA $D001,Y                     ;Sprite 0 Y Pos
        CMP $D00F                       ;Sprite 7 Y Pos
        BCC _L40

        LDA f6B,X
        BEQ _L40
        LDA #$00
        STA f6B,X

        INC ZP_PASSED_CARS_TOTAL
        LDA ZP_PASSED_CARS_TOTAL
        CMP #10                         ;Passed cars >=  10
        BCC _L40
        LDY #$00                        ;Passed cars = 0
        STY ZP_PASSED_CARS_TOTAL
        INY
        STY ZP_ADD_1000_PTS             ;Trigger Bonus Points (???)
_L40    DEX
        BMI _L41
        JMP _L23

_L41    LDY a4B
        INY
        CPY #$04
        BCC _L44
        LDY #$00
        LDA a4C
        EOR #$01
        STA a4C
        CLC
        ADC #$F6                        ;Enemy Car 00 frame
        LDY #$03
_L42    LDX SPR_FRAME_PTR_00,Y
        CPX #$FA                        ;Enemy night car frame
        BEQ _L43
        STA SPR_FRAME_PTR_00,Y
_L43    DEY
        BPL _L42

_L44    STY a4B

        LDA a59
        BEQ _L46
        INC a78
        LDA a78
        AND #$04
        BNE _L45
        LDA $D015                       ;Sprite display Enable
        AND #$EF                        ;#%11101111
        STA $D015                       ;Sprite display Enable
        JMP _L46

        ; Setup Pit sprite
_L45    LDA $D015                       ;Sprite display Enable
        ORA #$10                        ;#%00010000
        STA $D015                       ;Sprite display Enable
        LDA $D017                       ;Sprites Expand 2x Vertical (Y)
        ORA #$10                        ;#%00010000
        STA $D017                       ;Sprites Expand 2x Vertical (Y)
        LDA $D01C                       ;Sprites Multi-Color Mode Select
        ORA #$10                        ;#%00010000
        STA $D01C                       ;Sprites Multi-Color Mode Select
        LDA $D01D                       ;Sprites Expand 2x Horizontal (X)
        ORA #$10                        ;#%00010000
        STA $D01D                       ;Sprites Expand 2x Horizontal (X)
        LDA #$02                        ;Color Red
        STA $D02B                       ;Sprite 4 Color
        LDA #$F3                        ;"PIT" frame  pointer
        STA SPR_FRAME_PTR_04
        LDA #129
        STA $D008                       ;Sprite 4 X Pos
        LDA #58
        STA $D009
_L46    JMP jF2FB

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Something related to speed
sF227   CLD
        LDA #$00     ;#%00000000
        STA a2E
        STA a2F
        LDY a2D
        BEQ bF242
bF232   LDA a2E
        CLC
        ADC #$64     ;#%01100100
        STA a2E
        LDA a2F
        ADC #$00     ;#%00000000
        STA a2F
        DEY
        BNE bF232
bF242   LDA a2C
        LSR A
        LSR A
        LSR A
        LSR A
        TAY
        BEQ bF25B
bF24B   LDA a2E
        CLC
        ADC #$0A     ;#%00001010
        STA a2E
        LDA a2F
        ADC #$00     ;#%00000000
        STA a2F
        DEY
        BNE bF24B
bF25B   LDA a2C
        AND #$0F     ;#%00001111
        TAY
        BEQ bF272
bF262   LDA a2E
        CLC
        ADC #$01     ;#%00000001
        STA a2E
        LDA a2F
        ADC #$00     ;#%00000000
        STA a2F
        DEY
        BNE bF262
bF272   LDA a2F
        STA a2C
        LDA a2E
        STA a2D
        LDY #$05     ;#%00000101
bF27C   LSR a2D
        ROR a2C
        DEY
        BPL bF27C
        LDA a2D
        LSR A
        STA a5C
        LDA a2C
        ROR A
        STA a5B
        LDA a2C
        CLC
        ADC a5B
        STA a2C
        LDA a2D
        ADC a5C
        STA a2D
        RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
        ; Colors of the enemy car
ENEMY_CAR_COLOR_TBL
        .BYTE $02,$03,$05,$07,$08,$09,$0A,$0D
fF2A3   .BYTE $00,$00,$00,$00,$00,$00,$80,$00
        .BYTE $80,$00,$80,$00,$80,$30,$00,$A0
        .BYTE $60,$20,$00,$D0,$98,$70,$35,$10
        .BYTE $00,$C0,$40,$18,$08,$04,$02,$00
fF2C3   .BYTE $10,$0C,$0A,$09,$08,$07,$06,$06
        .BYTE $05,$05,$04,$04,$03,$03,$03,$02
        .BYTE $02,$02,$02,$01,$01,$01,$01,$01
        .BYTE $01,$00,$00,$00,$00,$00,$00,$00
fF2E3   .BYTE $00,$0A,$14,$1E,$FE,$FD,$FB,$F7
        .BYTE $01,$02,$04,$08
fF2EF   .BYTE $51,$6B,$B3,$CD
        ; Related to Speed
ACCELERATION_TBL_LO
        .BYTE $00,$00,$40,$08
ACCELERATION_TBL_HI
        .BYTE $03,$01,$00,$00

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Check for passed cars (?)
jF2FB
        LDY #$03                        ;Y = 4 (compare with sprites 0-3)
_L00    TYA
        ASL A                           ;Y *= 2
        TAX                             ;X = Y

        ; Convention used for comments:
        ; H = hero car (our car)
        ; E = enemy car (the ones to pass/avoid)

        ; Collision between Hero and Enemies cars?
        LDA $D000,X                     ;Sprite 0 X Pos
        SEC
        SBC #$05                        ;if ((E.X-5) > H.X) then No collision
        CMP $D00E                       ;Sprite 7 X Pos
        BCS _L01

        LDA $D001,X                     ;Sprite 0 Y Pos
        SEC
        SBC #$04                        ;if ((E.Y-4) > H.Y) then No collision
        CMP $D00F                       ;Sprite 7 Y Pos
        BCS _L01

        LDA $D000,X                     ;Sprite 0 X Pos
        CLC
        ADC #15                         ;if ((E.X+15) < H.X) then No collision
        CMP $D00E                       ;Sprite 7 X Pos
        BCC _L01

        LDA $D001,X                     ;Sprite 0 Y Pos
        CLC
        ADC #18                         ;if ((E.Y+18) < H.X) then No collision
        CMP $D00F                       ;Sprite 7 Y Pos
        BCC _L01

        LDA #$01
        STA ZP_COLLISION_DETECTED

        ; Why does it do the collision detection again?
_L01    LDA $D00E                       ;Sprite 7 X Pos
        SEC
        SBC #$03                        ;if ((H.x-3) > E.X) then No collsion
        CMP $D000,X                     ;Sprite 0 X Pos
        BCS _L02

        LDA $D00F                       ;Sprite 7 Y Pos
        SEC
        SBC #$02                        ;if ((H.y-2) > E.Y) then No collision
        CMP $D001,X                     ;Sprite 0 Y Pos
        BCS _L02

        LDA $D00E                       ;Sprite 7 X Pos
        CLC
        ADC #17                         ;if ((H.x+17) < E.Y) then No collision
        CMP $D000,X                     ;Sprite 0 X Pos
        BCC _L02

        LDA $D00F                       ;Sprite 7 Y Pos
        CLC
        ADC #20                         ;if ((H.y+20) < E.Y) then No collision
        CMP $D001,X                     ;Sprite 0 Y Pos
        BCC _L02

        LDA #$01
        STA ZP_COLLISION_DETECTED

_L02    DEY                             ;Compare it with sprites 0-3
        BPL _L00

        LDA a13
        BEQ _L03
        JMP _L13

_L03    LDY #$08
_L04    LDA PASSED_CARS_POS_LO,Y
        STA ZP_SCREEN_PTR_LO
        LDA PASSED_CARS_POS_HI,Y
        STA ZP_SCREEN_PTR_HI
        STY ZP_TMP_49
        LDX #$03
_L05    CPY ZP_PASSED_CARS_TOTAL
        BCC _L06
        LDA #$20                        ;Space
        BNE _L07
_L06    LDA PASSED_CARS_CHAR_TBL,X
_L07    LDY TWO_BY_TWO_OFFSET_TBL,X
        STA (ZP_SCREEN_PTR_LO),Y
        LDY ZP_TMP_49
        DEX
        BPL _L05
        DEY
        BPL _L04

        LDA ZP_ADD_1000_PTS
        BEQ _L10

        ; Score += 100
        ; The player sees +1000, but the rightmost zero
        ; doesn't get updated.
        LDA #40
        STA a71
        LDA #$00
        STA ZP_ADD_1000_PTS

        SED
        LDA ZP_SCORE_02
        CLC
        ADC #$01                        ;Score_02 += 01
        STA ZP_SCORE_02
        LDA ZP_SCORE_03
        ADC #$00                        ;Add possible carry
        STA ZP_SCORE_03

        CLD
        LDA ZP_SCORE_02
        AND #$1F                        ;#%00011111
        BNE _L08

        INC a53
        LDA #$5F                        ;#%01011111
        STA a55

        ; Print "BONUS 1000 PTS" message
_L08    LDY #$07
_L09    LDA BONUS_MSG,Y
        STA SCREEN_RAM+40*23+32,Y
        LDA THOUSAND_PTS_MSG,Y
        STA SCREEN_RAM+40*24+32,Y
        DEY
        BPL _L09

_L10    LDA a71
        BEQ _L13
        DEC a71
        LDA a71
        AND #$04
        BEQ _L11
        LDA #$01
        STA a66
        BNE _L13
_L11    LDA #$00
        STA a66
        LDA a71
        BNE _L13

        ; Erase "BONUS 1000 PTS" message
        LDY #$07
        LDA #$20
_L12    STA SCREEN_RAM+40*23+32,Y
        STA SCREEN_RAM+40*24+32,Y
        DEY
        BPL _L12

_L13    LDA a55
        BEQ _L17
        DEC a55
        LDA a55
        AND #$10
        BEQ _L15

        LDA #$01
        STA a67

        ; Print "EXTENDED TIME" message
        LDY #$07
_L14    LDA EXTENDED_MSG,Y
        STA SCREEN_RAM+40*14+32,Y
        LDA TIME2_MSG,Y
        STA SCREEN_RAM+40*15+32,Y
        DEY
        BPL _L14
        BMI _L17

        ; Erase "EXTENDED TIME" message
_L15    LDA #$00
        STA a67
        LDY #$07
        LDA #$20
_L16    STA SCREEN_RAM+40*14+32,Y
        STA SCREEN_RAM+40*15+32,Y
        DEY
        BPL _L16

_L17    JMP IRQ_HANDLER_MAIN

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
        ; Screen location of where to print the passed cars
PASSED_CARS_POS_LO
        .BYTE <(SCREEN_RAM+40*16+33)
        .BYTE <(SCREEN_RAM+40*16+35)
        .BYTE <(SCREEN_RAM+40*16+37)
        .BYTE <(SCREEN_RAM+40*18+33)
        .BYTE <(SCREEN_RAM+40*18+35)
        .BYTE <(SCREEN_RAM+40*18+37)
        .BYTE <(SCREEN_RAM+40*20+33)
        .BYTE <(SCREEN_RAM+40*20+35)
        .BYTE <(SCREEN_RAM+40*20+37)
PASSED_CARS_POS_HI
        .BYTE >(SCREEN_RAM+40*16+33)
        .BYTE >(SCREEN_RAM+40*16+35)
        .BYTE >(SCREEN_RAM+40*16+37)
        .BYTE >(SCREEN_RAM+40*18+33)
        .BYTE >(SCREEN_RAM+40*18+35)
        .BYTE >(SCREEN_RAM+40*18+37)
        .BYTE >(SCREEN_RAM+40*20+33)
        .BYTE >(SCREEN_RAM+40*20+35)
        .BYTE >(SCREEN_RAM+40*20+37)

        ; Offset to print one passed car, using
        ; PASSED_CARS_POS as reference
TWO_BY_TWO_OFFSET_TBL
        .BYTE $00,$01,$28,$29

        ; One Passed car is represented with 4 chars:
        ;   $75,$76
        ;   $77,$78
        ; Passed chars char idx
PASSED_CARS_CHAR_TBL
        .BYTE $75,$76,$77,$78

        .ENC "screen"
BONUS_MSG
        .TEXT " BOUNS  "                ;Notice the misspell.
THOUSAND_PTS_MSG
        .BYTE $22,$21,$21,$21           ;1000
        .TEXT " PTS"
EXTENDED_MSG
        .TEXT "EXTENDED"
TIME2_MSG
        .TEXT "  TIME  "

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Called when time is 0.
; Game over animnation gets triggered from here
GAME_OVER
        STY a56
        STX a57
        LDA a53
        BEQ _L01

        DEC a53
        LDY a54
        CPY #$05
        BCC _L00
        LDY #$04
_L00    LDA fF564,Y
        STA ZP_TICKS_PER_SECOND
        INY
        STY a54
        LDA #$60                ;Initial time: 60 seconds (BCD)
        STA ZP_TIME
        LDA #$00
        STA ZP_IS_GAME_OVER
        STA ZP_TICK_COUNTER
        LDY a57
        LDX a56
        RTS

_L01    INC a13
        LDA #$07
        STA ZP_ROAD_STATE

        ; Turn off headlight/pits sprites, in case they are visible
        LDA $D015               ;Sprite display Enable
        AND #$8F                ;#%10001111
        STA $D015               ;Sprite display Enable

        LDA #$00
        STA ZP_COLLISION_DETECTED
        STA a59
        STA ZP_SOUND_EFFECT_TO_PLAY
        STA ZP_SPLIT_ROAD_SPRITE_DISPLAYED
        STA a66
        STA ZP_UNUSED_30
        STA ZP_UNUSED_31
        STA ZP_UNUSED_32
        STA ZP_UNUSED_33
        LDA #$F0                ;#%11110000
        STA $D417               ;Filter Resonance Control / Voice Input Control

        LDY #75                 ;75 rows to scroll down
_L02    STY ZP_TMP_REG_01
        JSR DRAW_ROAD_TOP_ROW
        JSR SCROLL_DOWN
        JSR sEDDF
        LDY ZP_TMP_REG_01
        DEY
        BNE _L02

        LDY #31                         ;32 columns
_L03    LDA RACE_OVER_BOTTOM_ROW_BANNER,Y
        STA SCREEN_RAM,Y
        LDA #$0A                        ;Color Light Red
        STA COLOR_RAM,Y
        DEY
        BPL _L03

        JSR SCROLL_DOWN
        JSR sEDDF

        LDY #31                         ;32 columns
_L04    LDA RACE_OVER_TOP_ROW_BANNER,Y
        STA SCREEN_RAM,Y
        DEY
        BPL _L04

        JSR SCROLL_DOWN
        JSR sEDDF
        LDY #10
_L05    STY ZP_TMP_REG_01
        JSR DRAW_ROAD_TOP_ROW
        JSR SCROLL_DOWN
        JSR sEDDF
        LDY ZP_TMP_REG_01
        DEY
        BPL _L05

        SEI
        LDA #<IRQ_HANDLER_MAIN
        STA ZP_IRQ_LO
        LDA #>IRQ_HANDLER_MAIN
        STA ZP_IRQ_HI
        CLI

        INC a13
        LDA #163
_L06    CMP #$08
        BCC _L07
        SEC
        SBC #$04
        STA $D00F                       ;Sprite 7 Y Pos
        LDY #$01
        JSR DELAY_01
        LDA $D00F                       ;Sprite 7 Y Pos
        BNE _L06

        ; Erase "Extended time", in case it was on
_L07    LDY #$07
        LDA #$20                        ;Space
_L08    STA SCREEN_RAM+40*23+32,Y
        STA SCREEN_RAM+40*24+32,Y
        DEY
        BPL _L08

        LDY #$05
        JSR DELAY_00

        ; Scroll down 26 rows, and...
        LDX #26
_L09    STX ZP_TMP_REG_00
        JSR DRAW_ROAD_TOP_ROW
        JSR SCROLL_DOWN
        LDA SHOULDER_RIGHT_IDX
        CMP #100
        BEQ _L11
        BCC _L10
        DEC SHOULDER_RIGHT_IDX
        JMP _L11

_L10    INC SHOULDER_RIGHT_IDX
_L11    LDY #$01
        JSR DELAY_01
        LDX ZP_TMP_REG_00
        DEX
        BPL _L09

        ; Disable and Reset sprites X pos
NMI_HANDLER
        LDA #$00
        STA $D015                       ;Sprite display Enable
        LDX #$0F
_L00    STA $D000,X                     ;Sprite 0 X Pos
        DEX
        BPL _L00
        JMP SET_IRQ_TO_WAIT_BUTTON

fF564   .BYTE $40,$3A,$34,$2F,$22
RACE_OVER_TOP_ROW_BANNER
        .BYTE $79,$79,$79,$79,$79,$79,$85,$8E
        .BYTE $7A,$7E,$7A,$7B,$85,$86,$79,$79
        .BYTE $79,$79,$7A,$7E,$8A,$8B,$85,$86
        .BYTE $85,$8E,$79,$79,$79,$79,$79,$79
RACE_OVER_BOTTOM_ROW_BANNER
        .BYTE $79,$79,$79,$79,$79,$79,$8F,$90
        .BYTE $7F,$80,$7C,$7D,$87,$88,$79,$79
        .BYTE $79,$79,$7C,$89,$8C,$8D,$87,$88
        .BYTE $8F,$90,$79,$79,$79,$79,$79,$79

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
PLAY_AUDIO
        LDA a59
        BEQ bF5ED
        CMP #$01     ;#%00000001
        BNE bF5D9
        LDA #$00     ;#%00000000
        STA $D400    ;Voice 1: Frequency Control - Low-Byte
        STA $D415    ;Filter Cutoff Frequency: Low-Nybble
        LDA #$09     ;#%00001001
        STA $D401    ;Voice 1: Frequency Control - High-Byte
        LDA #$1F     ;#%00011111
        STA $D418    ;Select Filter Mode and Volume
        LDA #$F1     ;#%11110001
        STA $D417    ;Filter Resonance Control / Voice Input Control
        LDA #$C8     ;#%11001000
        STA $D416    ;Filter Cutoff Frequency: High-Byte
        STA a76
        LDA #$81     ;#%10000001
        STA $D404    ;Voice 1: Control Register
        INC a59
        JMP jF667

bF5D9   CMP #$02     ;#%00000010
        BNE bF5EA
        DEC a76
        LDA a76
        STA $D416    ;Filter Cutoff Frequency: High-Byte
        CMP #$96     ;#%10010110
        BCS bF5EA
        INC a59
bF5EA   JMP jF667

bF5ED   LDA a13
        CMP #$02
        BCC bF632
        CMP #$03
        BEQ bF616
        CMP #$04     ;#%00000100
        BEQ jF667
        LDA #$40     ;#%01000000
        STA $D404    ;Voice 1: Control Register
        LDA #$00     ;#%00000000
        STA $D40B    ;Voice 2: Control Register
        STA $D412    ;Voice 3: Control Register
        STA a61
        STA $D400    ;Voice 1: Frequency Control - Low-Byte
        LDA #$0D     ;#%00001101
        STA a62
        STA $D401    ;Voice 1: Frequency Control - High-Byte
        INC a13
bF616   LDA a61
        SEC
        SBC #$1E     ;#%00011110
        STA a61
        STA $D400    ;Voice 1: Frequency Control - Low-Byte
        LDA a62
        SBC #$00     ;#%00000000
        STA a62
        STA $D401    ;Voice 1: Frequency Control - High-Byte
        CMP #$0A     ;#%00001010
        BNE jF667
        INC a13
        JMP jF667

bF632   LDA ZP_SPEED_LO
        BNE bF641
        LDA ZP_SPEED_HI
        BNE bF641
        LDA #$00     ;#%00000000
        STA $D404    ;Voice 1: Control Register
        BEQ jF667
bF641   LDA ZP_SPEED_LO
        STA a2C
        LDA ZP_SPEED_HI
        STA a2D
        JSR sF227
        LDY #$02     ;#%00000010
bF64E   ASL a2E
        ROL a2F
        DEY
        BPL bF64E
        LDA a2E
        STA $D400    ;Voice 1: Frequency Control - Low-Byte
        LDA a2F
        CLC
        ADC #$03     ;#%00000011
        STA $D401    ;Voice 1: Frequency Control - High-Byte
        LDA #$41     ;#%01000001
        STA $D404    ;Voice 1: Control Register

jF667   LDA a67
        BNE bF6CD
        LDA ZP_SPLIT_ROAD_SPRITE_DISPLAYED
        BEQ bF672
        JMP jF6F3

bF672   LDA a66
        BNE bF6E0
        LDA ZP_SOUND_EFFECT_TO_PLAY
        BNE bF682
        STA $D412    ;Voice 3: Control Register
        BNE bF682
        JMP jF704

bF682   CMP #$01     ;#%00000001
        BNE bF6B8
        LDY a63
        INY
        CPY #$03     ;#%00000011
        BCC bF68F
        LDY #$00     ;#%00000000
bF68F   STY a63
        CPY #$01     ;#%00000001
        BCS bF6B1
        LDA ZP_SPEED_LO
        BNE bF6A0
        LDA ZP_SPEED_HI
        BNE bF6A0
        JMP jF704

bF6A0   LDA #$04     ;#%00000100
        STA $D40F    ;Voice 3: Frequency Control - High-Byte
        LDA #$81     ;#%10000001
        STA $D412    ;Voice 3: Control Register
        LDA #$F0     ;#%11110000
        STA $D417    ;Filter Resonance Control / Voice Input Control
        BNE jF704
bF6B1   LDA $00                 ;BUG? Should be LDA #$00 instead of LDA $00
        STA $D412    ;Voice 3: Control Register
        BEQ jF704
bF6B8   CMP #$02     ;#%00000010
        BNE jF704
        LDA #$1E     ;#%00011110
        STA $D40F    ;Voice 3: Frequency Control - High-Byte
        LDA #$81     ;#%10000001
        STA $D412    ;Voice 3: Control Register
        LDA #$F4     ;#%11110100
        STA $D417    ;Filter Resonance Control / Voice Input Control
        BNE jF704

bF6CD   LDA #$50     ;#%01010000
        STA $D40F    ;Voice 3: Frequency Control - High-Byte
        LDA #$21     ;#%00100001
        STA $D412    ;Voice 3: Control Register
        LDA #$F0     ;#%11110000
        ORA a77
        STA $D417    ;Filter Resonance Control / Voice Input Control
        BNE jF704
bF6E0   LDA #$82     ;#%10000010
        STA $D40F    ;Voice 3: Frequency Control - High-Byte
        LDA #$21     ;#%00100001
        STA $D412    ;Voice 3: Control Register
        LDA #$F0     ;#%11110000
        ORA a77
        STA $D417    ;Filter Resonance Control / Voice Input Control
        BNE jF704

        ; Play Warning "Split Road" ahead sound
jF6F3   LDA #$6E     ;#%01101110
        STA $D40F    ;Voice 3: Frequency Control - High-Byte
        LDA #$21     ;#%00100001
        STA $D412    ;Voice 3: Control Register
        LDA #$F0     ;#%11110000
        ORA a77
        STA $D417    ;Filter Resonance Control / Voice Input Control
jF704   LDA a13
        CMP #$02
        BCC bF70D
        JMP jF793

bF70D   LDA a3C
        CMP #$10     ;#%00010000
        BCS bF720
        LDA a3C
        SEC
        SBC #$10     ;#%00010000
        STA a74
        LDA #$01     ;#%00000001
        STA a75
        BNE bF72B
bF720   LDA #$10     ;#%00010000
        SEC
        SBC a3C
        STA a74
        LDA #$00     ;#%00000000
        STA a75
bF72B   LDA #$FF     ;#%11111111
        STA a72
        LDX #$03     ;#%00000011
bF731   TXA
        ASL A
        TAY
        LDA $D001,Y  ;Sprite 0 Y Pos
        CMP $D00F    ;Sprite 7 Y Pos
        BCC bF74F
        LDA $D001,Y  ;Sprite 0 Y Pos
        SEC
        SBC $D00F    ;Sprite 7 Y Pos
        CMP a72
        BCS bF760
        STA a72
        LDA #$00     ;#%00000000
        STA a73
        BEQ bF760
bF74F   LDA $D00F    ;Sprite 7 Y Pos
        SEC
        SBC $D001,Y  ;Sprite 0 Y Pos
        CMP a72
        BCS bF760
        STA a72
        LDA #$01     ;#%00000001
        STA a73
bF760   DEX
        BPL bF731
        LDA a72
        CMP #$20     ;#%00100000
        BCC bF770
        LDA #$40     ;#%01000000
        STA $D40B    ;Voice 2: Control Register
        BNE jF793
bF770   LDA #$41     ;#%01000001
        STA $D40B    ;Voice 2: Control Register
        LDA a73
        EOR a75
        BEQ bF786
        LDA a72
        CLC
        ADC #$20     ;#%00100000
        STA $D407    ;Voice 2: Frequency Control - Low-Byte
        JMP jF78E

bF786   LDA #$20     ;#%00100000
        SEC
        SBC a72
        STA $D407    ;Voice 2: Frequency Control - Low-Byte
jF78E   LDA #$0A     ;#%00001010
        STA $D408    ;Voice 2: Frequency Control - High-Byte
jF793   RTS

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Garbage
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$00
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$7F
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF,$00,$FF,$00,$FF
        .BYTE $00,$FF,$00,$FF

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Data
        * = $F800
        .BINARY "charset-f800-f97f.bin"         ;Chars 00-47
        .BINARY "sprites-f980-f9ff.bin"         ;Frames 230-231
        .BINARY "charset-fa00-fcbf.bin"         ;Chars 64-151
        .BINARY "sprites-fcc0-ffbf.bin"         ;Frames 243-254

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Garbage
        * = $FFC0
        .BYTE $00,$FF,$00
        .BYTE $00,$00,$FF
        .BYTE $00,$FF,$00
        .BYTE $FF,$00,$FF
        .BYTE $00,$FF,$00
        .BYTE $FF,$00,$FF
        .BYTE $00,$FF,$00
        .BYTE $FF,$00,$FF
        .BYTE $00,$FF,$00
        .BYTE $FF,$00,$FF
        .BYTE $00,$FF,$00
        .BYTE $FF,$00,$FF
        .BYTE $00,$FF,$00
        .BYTE $FF,$00,$FF
        .BYTE $00,$7F,$00
        .BYTE $FF,$00,$FF
        .BYTE $00,$FF,$00
        .BYTE $FF,$00,$FF
        .BYTE $00,$FF,$00,$FF

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
; Setup NMI, IRQ, START vectors
        ; NMI ($FFFA-$FFFB)
        .ADDR NMI_HANDLER
        ; COLD RESET ($FFFC-$FFFD)
        .ADDR START
        ; IRQ ($FFFE-$FFFF)
        .ADDR IRQ_HANDLER
